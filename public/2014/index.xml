<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2014s on Misframe</title>
    <link>http://misfra.me/2014/</link>
    <description>Recent content in 2014s on Misframe</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright &amp;copy; Preetam Jinka</copyright>
    <lastBuildDate>Tue, 30 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://misfra.me/2014/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Observium Annoys Me</title>
      <link>http://misfra.me/observium-annoys-me</link>
      <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/observium-annoys-me</guid>
      <description>&lt;p&gt;I first started using Observium in 2011 or 2012. I was a senior in high school. I wasn&amp;rsquo;t that good at programming. I mean, I could write code in a few languages, knew the basic data structures, Big-O, etc. but I was not familiar with many higher level concepts like monitoring. I knew about SNMP, but I didn&amp;rsquo;t know anything at all about the implementation. As &lt;a href=&#34;https://bitcable.com/&#34;&gt;Bitcable&amp;rsquo;s&lt;/a&gt; infrastructure grew to include network switches and more hardware, I needed a monitoring tool. I saw Nagios, Cacti, and others but they all intimidated me. I didn&amp;rsquo;t have time to learn those tools. Things like college applications and math homework took up most of my time.&lt;/p&gt;

&lt;p&gt;Observium was different. I was able to install it relatively quickly and had everything running without any issues. My daily routine when I got to school at 8 AM was to open up Observium in the syslab and get an overview of everything. It was enough.&lt;/p&gt;

&lt;p&gt;I eventually had to reinstall Observium on another VM. This time, installation wasn&amp;rsquo;t so smooth. I was able to add one device, but couldn&amp;rsquo;t add another. Huh?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./add_device.php &amp;lt;snip&amp;gt;.com ap v3 adminusr &amp;lt;snip&amp;gt; &amp;lt;snip&amp;gt; sha aes 161 udp
Try to add &amp;lt;snip&amp;gt;.com:
Trying v3 parameters observium/noAuthNoPriv ... 
No reply on credentials observium/noAuthNoPriv using v3.
Trying v3 parameters adminusr/authPriv ... 
Devices skipped: 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What went wrong? What&amp;rsquo;s the error? Why did it get skipped?&lt;/p&gt;

&lt;p&gt;I also found this goodie in the SNMP include file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /opt/observium/includes/snmp.inc.php 
&amp;lt;?php

/**
 * Observium
 *
 *   This file is part of Observium.
 *
 * @package    observium
 * @subpackage snmp
 * @author     Adam Armstrong &amp;lt;adama@memetic.org&amp;gt;
 * @copyright  (C) 2006-2014 Adam Armstrong
 *
 */

## If anybody has again the idea to implement the PHP internal library calls,
## be aware that it was tried and banned by lead dev Adam
##
## TRUE STORY. THAT SHIT IS WHACK. -- adama.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It looks like Observium uses the Net-SNMP library with PHP. And Net-SNMP isn&amp;rsquo;t exactly the greatest library out there&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/PreetamJinka&#34;&gt;@PreetamJinka&lt;/a&gt; noâ€¦ most languages have their own implementations b/c net-snmp is such a pile. (much of net-snmp is thread safe).&lt;/p&gt;&amp;mdash; Theo Schlossnagle (@postwait) &lt;a href=&#34;https://twitter.com/postwait/status/545755326608580608&#34;&gt;December 19, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I want to like Observium. I love the idea. This is what they write on their &lt;a href=&#34;http://observium.org/&#34;&gt;home page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Network monitoring for all.&lt;/p&gt;

&lt;p&gt;Observium is an autodiscovering network monitoring platform supporting a wide range of hardware platforms and operating systems including Cisco, Windows, Linux, HP, Juniper, Dell, FreeBSD, Brocade, Netscaler, NetApp and many more. Observium seeks to provide a powerful yet simple and intuitive interface to the health and status of your network.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That sounds great, but I think they messed up along the way. Observium is buggy. What I dislike even more is the fact that they charge for a &amp;ldquo;Professional&amp;rdquo; edition and release an open-source edition with limited features.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Open Source edition only receives critical security updates between 6-monthly release cycles and is best for small non-critical deployments, home use, evaluation or lab environments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They don&amp;rsquo;t say anything about new features. I&amp;rsquo;m interpreting this as, &amp;ldquo;the open source version will stay the same unless there are security issues, and anything new is something you have to pay for.&amp;rdquo; That annoys me. A lot.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;This is a GigE interface. I shouldn&amp;#39;t be seeing this &amp;gt;.&amp;lt;. &lt;a href=&#34;http://t.co/K7fG3o9cBG&#34;&gt;pic.twitter.com/K7fG3o9cBG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Preetam Jinka (@PreetamJinka) &lt;a href=&#34;https://twitter.com/PreetamJinka/status/407931417134260224&#34;&gt;December 3, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t like Observium anymore. It&amp;rsquo;s clunky (have you seen the &lt;a href=&#34;http://www.observium.org/wiki/Installation&#34;&gt;dependencies&lt;/a&gt;?!), buggy, and I don&amp;rsquo;t like what the authors are doing.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s why I&amp;rsquo;m working on &lt;a href=&#34;http://preetamjinka.github.io/cistern/&#34;&gt;Cistern&lt;/a&gt;. I want to show you how &lt;em&gt;I&lt;/em&gt; think network monitoring should be done. I think I&amp;rsquo;m on the right track because &lt;a href=&#34;https://cloudhelix.com/&#34;&gt;many&lt;/a&gt; &lt;a href=&#34;http://www.arbornetworks.com/products/peakflow&#34;&gt;companies&lt;/a&gt; &lt;a href=&#34;http://www.solarwinds.com/solutions/network-flow-analyzer.aspx&#34;&gt;are&lt;/a&gt; &lt;a href=&#34;http://www.metaforsoftware.com/blog/netflow-traffic-analyzer-beyond-nbad&#34;&gt;doing&lt;/a&gt; &lt;a href=&#34;https://www.sevone.com/supported-technologies/network-performance-management&#34;&gt;similar&lt;/a&gt; &lt;a href=&#34;http://www.ca.com/us/opscenter/ca-network-flow-analysis.aspx&#34;&gt;things&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A New Design</title>
      <link>http://misfra.me/a-new-design</link>
      <pubDate>Sun, 28 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/a-new-design</guid>
      <description>&lt;p&gt;There used to be a period of time when I kept changing Misframe&amp;rsquo;s design. I was also
changing what it was running on quite often. I spent most of my time thinking about
how it ran rather than what I was going to write. After hopping around from using WordPress,
Node.js, and Tumblr, I&amp;rsquo;ve landed on something so simple that I can&amp;rsquo;t get distracted from
the writing.&lt;/p&gt;

&lt;p&gt;With today&amp;rsquo;s tweak, Misframe is mostly in serif. I&amp;rsquo;m using &lt;a href=&#34;https://www.google.com/fonts/specimen/Lora&#34;&gt;Lora&lt;/a&gt;
as the serif font and Arial for the dates and footer. Lora looks like a mix between Times and
Palatino to me. The italic &amp;ldquo;&lt;em&gt;y&lt;/em&gt;&amp;rdquo; reminds me of Garamond. I guess it represents a mix of different things,
which is a trait that is shared with this blog.&lt;/p&gt;

&lt;p&gt;I have a few posts that I&amp;rsquo;m working on right now on &lt;a href=&#34;https://draftin.com/&#34;&gt;Draft&lt;/a&gt;. They&amp;rsquo;re
not about programming. They are a bit more serious than my programming posts. I guess the
switch to serif represents a slight change of mood too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SNMP Part II</title>
      <link>http://misfra.me/snmp-part-ii</link>
      <pubDate>Mon, 17 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/snmp-part-ii</guid>
      <description>

&lt;p&gt;This post is more about the details of how SNMP is currently implemented in Cistern.
The code at the latest commit as I write this is &lt;a href=&#34;https://github.com/PreetamJinka/cistern/tree/4f57ab68c9a18266908a7221823b24085bd39d1c/net/snmp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SNMP communication itself is pretty simple. There are requests and responses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/snmp-part-ii/get-request-response.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PDU&lt;/em&gt; stands for &amp;ldquo;protocol data unit.&amp;rdquo; I think of them as structs. If you look
in the RFCs you&amp;rsquo;ll see them defined like this, in the ASN.1 language:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GetResponse-PDU ::=
  [2]
      IMPLICIT SEQUENCE {
          request-id
              RequestID,

          error-status
              ErrorStatus,

          error-index
              ErrorIndex,

          variable-bindings
              VarBindList
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a pretty dense way of describing a &lt;code&gt;GetResponse&lt;/code&gt;. You can just think
of the &lt;code&gt;GetRequest&lt;/code&gt; and &lt;code&gt;GetResponse&lt;/code&gt; PDUs as structs with certain fields.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/snmp-part-ii/get-request-response-pdus.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice that they have the same structure. The only thing that changes between the two
is the PDU type identifier which goes in the header and the &lt;code&gt;VarBindList&lt;/code&gt;. The &lt;code&gt;RequestID&lt;/code&gt;
stays the same. This is how you know which request you got a response to, and it&amp;rsquo;s very important.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you run Wireshark (or tcpdump) as you run &lt;code&gt;snmpget&lt;/code&gt; (or Cistern :P) over SNMPv3 with encryption,
you&amp;rsquo;ll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/snmp-part-ii/wireshark-screenshot.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;There are four packets of communication. The last two are encrypted. You see the first two show up
because they are required to fetch the necessary parameters to do encryption.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/snmp-part-ii/discovery.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;GetRequest&lt;/code&gt; is blank. The response is a &lt;code&gt;Report&lt;/code&gt;, a PDU similar to a &lt;code&gt;GetResponse&lt;/code&gt;. It&amp;rsquo;s
returning a COUNTER of how many invalid SNMP packets were dropped. The important part of this
response is that we get the following parameters necessary for encryption: &lt;code&gt;EngineID&lt;/code&gt;, &lt;code&gt;EngineTime&lt;/code&gt;,
and &lt;code&gt;EngineBoots&lt;/code&gt;. Once we have those parameters, we can start encrypting the rest of our packets.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This is what SNMP communication may potentially look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/snmp-part-ii/communication-diagram.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Things are out of order, lots of things are going on at the same time, and it&amp;rsquo;s all happening
over a single port. I suppose you &lt;em&gt;could&lt;/em&gt; open a new socket for each request, but that&amp;rsquo;s not
scalable at all! So this is our situation: a single socket with request-response sequences
happening concurrently, and it has to be really fast and efficient.&lt;/p&gt;

&lt;h2 id=&#34;concurrency-for-the-win:02dad372be9ac2904e7edfac9ac7ddac&#34;&gt;Concurrency for the win&lt;/h2&gt;

&lt;p&gt;It turns out that it&amp;rsquo;s quite simple to structure a program using goroutines and channels
to handle this scenario. We basically have to send requests over the socket, receive responses,
and send the corresponding response to whatever made that request. Here&amp;rsquo;s how Cistern does it
at the moment:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a map from &lt;code&gt;RequestID&lt;/code&gt;s to channels.&lt;/li&gt;
&lt;li&gt;Start a goroutine that listens on the socket, decodes the &lt;code&gt;RequestID&lt;/code&gt; from response PDUs, and sends
to a corresponding channel in the map.&lt;/li&gt;
&lt;li&gt;If a channel is found, send the response data to it.&lt;/li&gt;
&lt;li&gt;Delete the channel from the map.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That goroutine keeps running for the length of the session. Nothing else is reading from that socket.&lt;/p&gt;

&lt;p&gt;Then, when a request is to be made:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a request packet, and remember the &lt;code&gt;RequestID&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a channel. Let&amp;rsquo;s call it C.&lt;/li&gt;
&lt;li&gt;Send the packet over the socket, and set C in the map.&lt;/li&gt;
&lt;li&gt;Start another goroutine to do a &amp;ldquo;timeout.&amp;rdquo; Basically, if the channel still exists in the map
after a certain period of time, &lt;em&gt;close the channel&lt;/em&gt; and delete the entry in the map&lt;/li&gt;
&lt;li&gt;This is the cool part. Attempt to read from the channel like so: &lt;code&gt;decoded, ok = &amp;lt;-C&lt;/code&gt;. If C is
closed, &lt;code&gt;ok&lt;/code&gt; will be false. Otherwise, we should see something for &lt;code&gt;decoded&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the request timed out, try again (only a finite number of times).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So it turns out this approach works really well. You can start up requests concurrently and
stuff doesn&amp;rsquo;t blow up. Concurrency (and Go) for the win.&lt;/p&gt;

&lt;h2 id=&#34;single-socket:02dad372be9ac2904e7edfac9ac7ddac&#34;&gt;Single socket?&lt;/h2&gt;

&lt;p&gt;The current implementation uses a separate socket for each device that Cistern connects to.
If you had 1,000 devices, you&amp;rsquo;ll have to open 1,000 sockets. That doesn&amp;rsquo;t seem efficient.
I think everything can be done using a single socket. Specifically, &lt;a href=&#34;http://golang.org/pkg/net/#UDPConn.ReadFromUDP&#34;&gt;&lt;code&gt;UDPConn.ReadFromUDP&lt;/code&gt;&lt;/a&gt;
needs to be used. Basically, it allows you to read from a socket and know where it came from.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;session&amp;rdquo; logic in Cistern will get more complicated. I&amp;rsquo;m honestly not sure what the performance
would look like with one socket vs many. I don&amp;rsquo;t even have many SNMP devices to test against.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:02dad372be9ac2904e7edfac9ac7ddac&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The single socket approach will probably be coming by the end of the year or sometime
next year.&lt;/p&gt;

&lt;p&gt;I really want this to be the world&amp;rsquo;s most concurrent + efficient SNMPv3 implementation. It&amp;rsquo;ll take
a lot of work to get there, though. I really would like an SNMP simulator. It is definitely possible.
I just need the time to do it&amp;hellip;&lt;/p&gt;

&lt;p&gt;I think this will crush Net-SNMP in terms of thread-safety :P.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;How the heck do I add this kind of stuff to my rÃ©sumÃ© / LinkedIn? Listing &amp;ldquo;SNMP&amp;rdquo; doesn&amp;rsquo;t really capture
all of it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SNMP Part I</title>
      <link>http://misfra.me/snmp-part-i</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/snmp-part-i</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol&#34;&gt;SNMP&lt;/a&gt; stands for Simple Network Management Protocol.
In case you haven&amp;rsquo;t heard, it&amp;rsquo;s not simple. SNMP is older than me, and it&amp;rsquo;s used everywhere in networking.&lt;/p&gt;

&lt;p&gt;I need SNMP support for &lt;a href=&#34;https://github.com/PreetamJinka/cistern&#34;&gt;Cistern&lt;/a&gt;. sFlow is great for statistics
but it&amp;rsquo;s not useful to get general information. You can easily get interface statistics from sFlow datagrams,
but you may want to know what the interface description strings are. You may want to know which VLANs those interfaces
are assigned to. You may even want to get the description strings of VLANs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/snmp-part-i/observium-vlans.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The idea of using flows to get this information is silly. The best way to do this is via polling, and doing so when you need to.
That&amp;rsquo;s where SNMP comes in.&lt;/p&gt;

&lt;p&gt;So, why write a decoder in Go? There&amp;rsquo;s &lt;a href=&#34;http://net-snmp.sourceforge.net/&#34;&gt;Net-SNMP&lt;/a&gt;, which is basically the defacto
library for this stuff. It has a C library that you can easily use from Go. The issue is that it&amp;rsquo;s not thread safe.
That&amp;rsquo;s a little annoying for Go programs. The other issue is that I dislike using cgo. A pure-Go implementation
is much cleaner, in my opinion.&lt;/p&gt;

&lt;h2 id=&#34;protocol-summary:da9dd7ab917e637ee8e36ceb9537f444&#34;&gt;Protocol summary&lt;/h2&gt;

&lt;p&gt;SNMP is not like sFlow at all. sFlow is unidirectional, i.e. packets go one way. SNMP has requests and responses.
To make things even more complicated, it&amp;rsquo;s all over UDP. That means it&amp;rsquo;s your responsibility to handle that state.
SNMP is also used for things like switched PDUs (power distribution units), so you can use SNMP to do remote reboots.
This is very sensitive stuff, so you really need your datagrams to be encryped. SNMPv3 supports encryption, which is
great but complicated!&lt;/p&gt;

&lt;p&gt;SNMP uses a binary encoding format called &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&#34;&gt;ASN.1&lt;/a&gt;. There&amp;rsquo;s a
standard Go package called &lt;a href=&#34;http://golang.org/pkg/encoding/asn1/&#34;&gt;encoding/asn1&lt;/a&gt;, but it&amp;rsquo;s quite awkward to use. There&amp;rsquo;s
some funk with struct tags and reflection. It seems that most people write their own ASN.1 encoding and decoding functions.&lt;/p&gt;

&lt;p&gt;I spent most of my time reading specifications, diagrams, and RFCs to figure out just how to send valid datagrams.
Wireshark was incredibly useful in this case. Its interface is excellent. You can click on specific bytes in the hex and it&amp;rsquo;ll
tell you which field they correspond to.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;Look, I&amp;#39;m getting a response! &lt;a href=&#34;http://t.co/yenOjrn2R1&#34;&gt;pic.twitter.com/yenOjrn2R1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Preetam Jinka (@PreetamJinka) &lt;a href=&#34;https://twitter.com/PreetamJinka/status/528057163806437376&#34;&gt;October 31, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I grabbed a Brocade FWS 624 switch off Ebay. I&amp;rsquo;m using that for my SNMP tests at home. I think it&amp;rsquo;s too risky to mess around
with production equipment that customers depend on (duh!). This is a layer 2 switch with SNMP and sFlow capability, so it&amp;rsquo;s really helpful.
I really don&amp;rsquo;t need anything with 24 ports, but it&amp;rsquo;s hard to find cheap managed switches that support sFlow. I got really lucky with this find
on Ebay, especially since it&amp;rsquo;s a Brocade device and those are the only ones I have experience with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/snmp-part-i/fws-624.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;Hand-crafting SNMP packets right now :&amp;#39;( &lt;a href=&#34;http://t.co/faJNB5iH1Q&#34;&gt;pic.twitter.com/faJNB5iH1Q&lt;/a&gt;&lt;/p&gt;&amp;mdash; Preetam Jinka (@PreetamJinka) &lt;a href=&#34;https://twitter.com/PreetamJinka/status/528811871567347713&#34;&gt;November 2, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;A lot of this is quite tedious. Once I got used to hand-crafting packets and the encoding, I whipped up some simple
Go types that encoded themselves. Then I was able to write stuff like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;conn.WriteTo(Sequence{
	Int(3), // this is an INTEGER
	Sequence{
		Int(rand.Intn(1000000000)),
		Int(65507),
		String(&amp;quot;\x04&amp;quot;), // this is an OCTET STRING
		Int(3),
	},
	String(Sequence{
		String(&amp;quot;&amp;quot;),
		Int(0),
		Int(0),
		String(&amp;quot;&amp;quot;),
		String(&amp;quot;&amp;quot;),
		String(&amp;quot;&amp;quot;),
	}.Encode()),
	Sequence{
		String(&amp;quot;&amp;quot;),
		String(&amp;quot;&amp;quot;),
		GetRequest{
			Int(rand.Intn(1000000000)),
			Int(0),
			Int(0),
			Sequence{},
		},
	},
}.Encode(), &amp;amp;net.UDPAddr{
	IP:   net.IPv4(10, 2, 33, 100),
	Port: 161,
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last major piece was encryption, which is a major PITA. You can&amp;rsquo;t use Wireshark for this (duh!).
I used &lt;a href=&#34;https://github.com/tiebingzhang/WapSNMP/&#34;&gt;github.com/tiebingzhang/WapSNMP&lt;/a&gt; as a reference for the
encryption stuff. I thought about forking it but it doesn&amp;rsquo;t have a license. It&amp;rsquo;s also a fork, so I&amp;rsquo;m not
really sure how to deal with that. I also didn&amp;rsquo;t think it was good, idiomatic Go code. :-/&lt;/p&gt;

&lt;p&gt;After hours of work over a few weeks&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;IT WORKS! &lt;a href=&#34;http://t.co/OXhIZX6uqA&#34;&gt;pic.twitter.com/OXhIZX6uqA&lt;/a&gt;&lt;/p&gt;&amp;mdash; Preetam Jinka (@PreetamJinka) &lt;a href=&#34;https://twitter.com/PreetamJinka/status/531541736062214144&#34;&gt;November 9, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Not simple at all. At least now I have something that works and can iterate really quickly. And with that,
SNMP gets added to my LinkedIn profile :P.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom Router Part II</title>
      <link>http://misfra.me/custom-router-part-ii</link>
      <pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/custom-router-part-ii</guid>
      <description>

&lt;p&gt;Welcome back! In my &lt;a href=&#34;http://misfra.me/custom-router&#34;&gt;previous post&lt;/a&gt; I
described this interesting idea of writing a router.
I had no idea whether or not it would work. I knew it was possible, of course. I
run two OpenBSD routers in a failover setup with CARP (this blog is routed through
them, FYI).&lt;/p&gt;

&lt;h2 id=&#34;setup:4ac6ca2971bd3a3849aacaefee3bcb19&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Turns out my BeagleBone Black is great for testing this out! When you plug in
a factory default BeagleBone Black into a computer, it sets up a network over
USB.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/custom-router-part-ii/bbb-network.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eth1      Link encap:Ethernet  HWaddr 78:a5:04:c8:8c:a3  
          inet addr:192.168.7.1  Bcast:192.168.7.3  Mask:255.255.255.252
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It shows up on my laptop as eth1. My laptop is assigned the address 192.168.7.1 and
the board has 192.168.7.2. sshd is running on the board, so I can easily SSH in via
192.168.7.2:22.&lt;/p&gt;

&lt;p&gt;The board has no other connections. There&amp;rsquo;s no WiFi, and I don&amp;rsquo;t have it connected
over Ethernet. It cannot send packets out to the Internet. What it &lt;em&gt;can&lt;/em&gt; do is
send packets to my laptop, and my laptop &lt;em&gt;is&lt;/em&gt; connected to the Internet. The Internet
is just a series of tubes right?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll just summarize the steps I took to getting this board to reach the rest
of the Internet.&lt;/p&gt;

&lt;h2 id=&#34;default-gateway:4ac6ca2971bd3a3849aacaefee3bcb19&#34;&gt;Default gateway&lt;/h2&gt;

&lt;p&gt;First, we need to set my laptop as the board&amp;rsquo;s default gateway. Otherwise,
it won&amp;rsquo;t know where to send packets outside the subnet!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@beaglebone:~# ping 199.58.162.130
connect: Network is unreachable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a simple one-liner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@beaglebone:~# ip route add default via 192.168.7.1
root@beaglebone:~# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.7.1     0.0.0.0         UG    0      0        0 usb0
192.168.7.0     0.0.0.0         255.255.255.252 U     0      0        0 usb0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, does it work? Let me run tcpdump on my laptop and run ping again on the board&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  âˆ‚ [21:06:42] [~]: sudo tcpdump -i eth1 icmp
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
21:06:49.397470 IP 192.168.7.2 &amp;gt; misfra.me: ICMP echo request, id 1451, seq 1, length 64
21:06:50.406267 IP 192.168.7.2 &amp;gt; misfra.me: ICMP echo request, id 1451, seq 2, length 64
21:06:51.405815 IP 192.168.7.2 &amp;gt; misfra.me: ICMP echo request, id 1451, seq 3, length 64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! Packets are reaching my laptop&amp;hellip; but they&amp;rsquo;re not going anywhere after that. They&amp;rsquo;re
simply dropped.&lt;/p&gt;

&lt;h2 id=&#34;packet-sniffing:4ac6ca2971bd3a3849aacaefee3bcb19&#34;&gt;Packet sniffing&lt;/h2&gt;

&lt;p&gt;I gave a talk at beCamp 2014 on &lt;a href=&#34;https://github.com/PreetamJinka/packet-sniffing&#34;&gt;packet sniffing&lt;/a&gt;.
There are a few examples that I reuse over and over simply because they&amp;rsquo;re great templates for me.&lt;/p&gt;

&lt;p&gt;tcpdump is obviously seeing the packets we want, so we can too. Raw socket it up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fd, err := syscall.Socket(syscall.AF_PACKET, syscall.SOCK_RAW, htons(syscall.ETH_P_ALL))
if err != nil {
	log.Fatal(err)
}

log.Println(&amp;quot;Listening on a raw socket...&amp;quot;)

. . .

n, _, err := syscall.Recvfrom(fd, buf, 0)
if err != nil {
	log.Fatal(err)
}

. . .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;decoding-packets:4ac6ca2971bd3a3849aacaefee3bcb19&#34;&gt;Decoding packets&lt;/h2&gt;

&lt;p&gt;What you get from reading from AF_PACKET + SOCK_RAW packets are Ethernet frames.
You need to decode these. I use my &lt;a href=&#34;https://github.com/PreetamJinka/proto/blob/master/ethernet.go&#34;&gt;proto&lt;/a&gt;
package for that.&lt;/p&gt;

&lt;h2 id=&#34;routing-itself-and-packet-injection:4ac6ca2971bd3a3849aacaefee3bcb19&#34;&gt;Routing itself and packet injection&lt;/h2&gt;

&lt;p&gt;You just got a packet, and you have to route it somewhere else. Where (and how) do you send it?
Well&amp;hellip;  the simple answer would be to send it to your default gateway. There&amp;rsquo;s obviously more to it,
but you can figure that out on your own (I did :P).&lt;/p&gt;

&lt;p&gt;How do you actually send that packet to the default gateway? We know that the default gateway is on the
same subnet you are. Therefore, we&amp;rsquo;re only working at layer 2 of the &lt;a href=&#34;http://en.wikipedia.org/wiki/OSI_model&#34;&gt;OSI model&lt;/a&gt;.
There&amp;rsquo;s a really simple answer for this one: just modify the MAC addresses in the Ethernet packet header
and write the packet back into the socket. That&amp;rsquo;s it! I think this is called &lt;a href=&#34;http://en.wikipedia.org/wiki/Packet_injection&#34;&gt;packet injection&lt;/a&gt;.
The Wikipedia page makes it sound evil&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;getting-packets-back:4ac6ca2971bd3a3849aacaefee3bcb19&#34;&gt;Getting packets back&lt;/h2&gt;

&lt;p&gt;One thing you have to be careful about is getting packets back from the Internet.
I set up a static route on my WiFi router to route the 192.168.7.0/30 subnet
to my laptop.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/custom-router-part-ii/static-route.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Yes, the subnet mask is incorrect but it doesn&amp;rsquo;t make a difference in this situation.&lt;/p&gt;

&lt;h2 id=&#34;end-result:4ac6ca2971bd3a3849aacaefee3bcb19&#34;&gt;End result&lt;/h2&gt;

&lt;p&gt;Ta-daaaah!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/custom-router-part-ii/demo.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;On the left is the log output of a Go program that&amp;rsquo;s reading and writing from/to
a raw socket, and printing out the Ethernet frames it&amp;rsquo;s receiving and sending.
On the right is an SSH session on the board while I run &lt;code&gt;apt-get update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My Go program does the first routing to the Internet (and last in the inbound
direction).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2014/10/22 21:39:30 Listening on a raw socket...
2014/10/22 21:39:30 &amp;lt;nil&amp;gt;
2014/10/22 21:39:33 this one needs to go to the gateway
2014/10/22 21:39:33 {78:a5:04:c8:8c:a3 26:06:05:5f:40:f4 0 2048 &amp;lt;snip&amp;gt;
2014/10/22 21:39:33 {e8:de:27:bb:6b:aa 9c:4e:36:59:b2:54 0 2048 &amp;lt;snip&amp;gt;
2014/10/22 21:39:33 &amp;lt;nil&amp;gt;
2014/10/22 21:39:33 this one needs to go to the BeagleBone Black
2014/10/22 21:39:33 &amp;lt;nil&amp;gt;
2014/10/22 21:39:34 this one needs to go to the gateway
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;traceroute:4ac6ca2971bd3a3849aacaefee3bcb19&#34;&gt;Traceroute&lt;/h2&gt;

&lt;p&gt;Check this out&amp;hellip; it&amp;rsquo;s cool.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@beaglebone:~# traceroute misfra.me
traceroute to misfra.me (199.58.162.130), 30 hops max, 60 byte packets
 1  192.168.0.1 (192.168.0.1)  4.363 ms  6.072 ms  13.493 ms
 2  10.2.33.1 (10.2.33.1)  16.266 ms  16.125 ms  16.266 ms
 3  10.1.10.1 (10.1.10.1)  15.894 ms  15.743 ms  15.598 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How come my laptop (192.168.7.1) isn&amp;rsquo;t showing up? Let&amp;rsquo;s think about
how traceroute(1) actually works. In short, it sends out multiple packets
with different TTLs (time to live). Quoting &lt;a href=&#34;http://en.wikipedia.org/wiki/Time_to_live&#34;&gt;Wikipedia&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The TTL field is set by the sender of the datagram, and reduced by every router on the route to its destination. If the TTL field reaches zero before the datagram arrives at its destination, then the datagram is discarded and an ICMP error datagram (11 - Time Exceeded) is sent back to the sender.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The reason why we don&amp;rsquo;t see 192.168.7.1 is because my Go program does not
decrease the TTL (I&amp;rsquo;ll explain why later). My Go program also does not send ICMP
datagrams. Think about this for a second. Isn&amp;rsquo;t my custom router invisible? Well,
it&amp;rsquo;s not since it&amp;rsquo;s the default gateway, but what if it was a few hops down? Isn&amp;rsquo;t
that scary? Uhm&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;checksums-and-ttls:4ac6ca2971bd3a3849aacaefee3bcb19&#34;&gt;Checksums and TTLs&lt;/h2&gt;

&lt;p&gt;If you open up a diagram of an Ethernet frame (look &lt;a href=&#34;http://en.wikipedia.org/wiki/Ethernet_frame#Structure&#34;&gt;here&lt;/a&gt;),
you&amp;rsquo;ll notice that there&amp;rsquo;s a field called &amp;ldquo;Frame check sequence&amp;rdquo;. This is a 32-bit CRC &amp;ndash; a checksum.
Turns out that NICs take care of calculating this checksum for you, so you don&amp;rsquo;t have to worry about it when
constructing Ethernet frames.&lt;/p&gt;

&lt;p&gt;IPv4 packets are different. You have to make sure the checksum stays consistent. The reason why
I&amp;rsquo;m not decreasing the TTL is because I&amp;rsquo;d have to recalculate the IPv4 packet checksum, and
I simply didn&amp;rsquo;t have time for that (I had to eat dinner :D).&lt;/p&gt;

&lt;h2 id=&#34;conclusion-and-next-steps:4ac6ca2971bd3a3849aacaefee3bcb19&#34;&gt;Conclusion and next steps&lt;/h2&gt;

&lt;p&gt;This was a pretty cool thing to write before dinner. It&amp;rsquo;s not that long, either. All of the code
is available on GitHub and is MIT licensed (&amp;lsquo;cause I like your freedom):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/PreetamJinka/gateway-experiment&#34;&gt;https://github.com/PreetamJinka/gateway-experiment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;m thinking about inter-VLAN routing, stateful firewalls, routing tables, etc.
It would be neat to try to implement some of this stuff in Go. I already wrote a &lt;a href=&#34;http://misfra.me/router-on-a-stick&#34;&gt;post&lt;/a&gt; on inter-VLAN routing. That was over two years ago? I keep redoing stuff, but every time I do it I go a level lower :P.&lt;/p&gt;

&lt;p&gt;Well, I hope that was informative. Ask me questions on Twitter: &lt;a href=&#34;https://twitter.com/PreetamJinka&#34;&gt;@PreetamJinka&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom Router</title>
      <link>http://misfra.me/custom-router</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/custom-router</guid>
      <description>&lt;p&gt;So this clever new idea has been floating around in my head
for a couple of days now. If you consider a router, it&amp;rsquo;s basically
connecting directing packets to different subnets. The simple case
is when you have two subnets and a router that&amp;rsquo;s in the middle.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s call the router R1, with the two subnets being S1 and S2.
Let&amp;rsquo;s say you&amp;rsquo;re managing a bunch of servers in a data center rack
and they&amp;rsquo;re all on S2. Your router, R1, connects them to your
bandwidth provider who is on S1.&lt;/p&gt;

&lt;p&gt;R1 has two interfaces &amp;ndash; one for S1 and one for S2 &amp;ndash; and it
has an IP address on each. Your provider is routing all of the
traffic going to S2 to R1&amp;rsquo;s address on S1. All of your hosts
on S2 are sending the packets that need to go outside the subnet
to R1&amp;rsquo;s address on S2.&lt;/p&gt;

&lt;p&gt;This is really simple (conceptually, of course). I think you can
write something that can do this with a couple of raw sockets.
Well, I think I can actually write something that can do
simple routing like this. All you have to do is peek at the
IP headers and rewrap the IP packets with new Ethernet headers.&lt;/p&gt;

&lt;p&gt;Argh, I don&amp;rsquo;t think I have the hardware to test this out easily.
Maybe I can play around with some VMs? I haven&amp;rsquo;t tried that out
yet.&lt;/p&gt;

&lt;p&gt;For some reason I keep thinking that the kernel doesn&amp;rsquo;t like this.
Perhaps &lt;code&gt;iptables&lt;/code&gt; will mess with stuff or something. Anyway,
it&amp;rsquo;d be &lt;em&gt;really&lt;/em&gt; cool to write a firewall in Go that does some
neat deep packet inspection.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Increasing my knowledge of the networking stack :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Crazy One</title>
      <link>http://misfra.me/the-crazy-one</link>
      <pubDate>Thu, 16 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/the-crazy-one</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;We should be celebrating the ones who take time to slow down and better understand themselves, the ones who are shaken by lifeâ€™s beauty, the ones who arenâ€™t afraid to be alone, the ones who play the baby grand piano when no oneâ€™s listening, the ones who donâ€™t follow the money, the ones who practice compassion, the ones who admit the only thing they know is that they know nothing at all.
â€” &lt;a href=&#34;https://medium.com/@stanleyyork/the-crazy-ones-part-ii-454f6050b6e9&#34;&gt;The Crazy Ones, Part II&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I liked that paragraph, especially the part about the piano.&lt;/p&gt;

&lt;p&gt;It reminded me of this review of Bitcable I found: &lt;a href=&#34;http://www.96mb.com/96mb-low-end-vps-review-part-xix-bitcable/&#34;&gt;http://www.96mb.com/96mb-low-end-vps-review-part-xix-bitcable/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/the-crazy-one/excerpt.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Some people ask for a free trial in order to write a review. This reviewer did not. I had no idea he would write this, so I
did not give him any sort of special treatment. Looking back, I&amp;rsquo;m really impressed I was able to pull that off. I was generally
as quick for every client.&lt;/p&gt;

&lt;p&gt;This was a little over three years ago, in August 2011. Yeah. I was in the middle of a summer internship. Each day was eight hours of interning,
plus two hours to commute to Fairfax and back, and then I was home checking my emails often :). For some reason I thought that it was a good
use of my time.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re interning (or working in general), there&amp;rsquo;s always someone looking at your work. There are those who guide you, mentor you, and
make sure you&amp;rsquo;re doing the right thing. Your hard work usually gets noticed and (hopefully) appreciated. There&amp;rsquo;s an incentive to work hard.
This is also the case when you go to school. You get good grades. Teachers (and professors, I guess) notice that.&lt;/p&gt;

&lt;p&gt;Working on my web hosting thing was something I did (and still do) all by myself. There are no guides. No mentors. No one to tell you that
you&amp;rsquo;re doing the right thing. Most importantly, you&amp;rsquo;re not exactly rewarded for your hard work. No one sees the work. It sounds crazy. I think
it reminds me of mad scientists working alone an a dark lab on some complicated experiments. I was the crazy one. I was experimenting and
writing stuff like &lt;a href=&#34;https://gist.github.com/PreetamJinka/42fd851980ef9a04e7ab&#34;&gt;this VM provisioning thing&lt;/a&gt;. That script was buried away somewhere
until I found it again three years later.&lt;/p&gt;

&lt;h2 id=&#34;entrepreneurship:a8fad3f8d4b387ec43daebd0a39cc052&#34;&gt;&amp;ldquo;Entrepreneurship&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I personally think that entrepreneurs are the crazy type. And you can&amp;rsquo;t teach crazy. I&amp;rsquo;m not a fan of the
entrepreneurship stuff that people organize and sign up for. Have you seen the How to Start a Startup series? Paul Graham mentions
in &lt;a href=&#34;http://startupclass.samaltman.com/courses/lec03/&#34;&gt;lecture 3&lt;/a&gt; that &amp;ldquo;the best way to learn on how to start a startup is just to just try to start it.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Hm&amp;hellip; I guess I&amp;rsquo;ll mention that perhaps the most amazing things are happening
all the time and they simply go unnoticed. That doesn&amp;rsquo;t apply to me, of course&amp;hellip; have you seen the screenshots I&amp;rsquo;ve tweeted? :P
Maybe I should stop doing that&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>State of the State Part II</title>
      <link>http://misfra.me/state-of-the-state-part-ii</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/state-of-the-state-part-ii</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://misfra.me/state-of-the-state&#34;&gt;original post&lt;/a&gt; was written last December (almost 10 months ago). To summarize, I mentioned my time series logging program, Adversaria, and I wrote about my little toy key-value store, Fickle. I wrote that I would try to add transactions, and then I ended with a goal to use it to power this blog.&lt;/p&gt;

&lt;p&gt;Since then, I wrote a &lt;a href=&#34;https://github.com/PreetamJinka/txfun/blob/5440e53e17c050b620da6410aaa5bcf1353fd5f5/db_test.go&#34;&gt;skip list&lt;/a&gt; in C, implemented basic &lt;a href=&#34;https://github.com/PreetamJinka/txfun/blob/a36943e976d9baf5d94dcd85726c21f683428810/db_test.go&#34;&gt;transactions&lt;/a&gt; in Go, and played around with &lt;a href=&#34;https://github.com/PreetamJinka/chunks&#34;&gt;chunks&lt;/a&gt; of ordered byte slices, and wrote a &lt;a href=&#34;https://github.com/PreetamJinka/listmap&#34;&gt;memory-mapped linked list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There was certainly a lack of focus, and part of that was due to the fact that I wasn&amp;rsquo;t exactly solving a problem. All of that work was mainly due to curiosity. This time, I do have a problem to solve, and it&amp;rsquo;s worth solving!&lt;/p&gt;

&lt;h2 id=&#34;cistern:d5f7aecad5355d283ad71d247279c609&#34;&gt;Cistern&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m not exactly interested in writing a traditional database anymore. I&amp;rsquo;ve been working mainly on &lt;a href=&#34;https://github.com/PreetamJinka/cistern&#34;&gt;Cistern&lt;/a&gt;, my sFlow collector. &lt;a href=&#34;http://sflow.org/&#34;&gt;sFlow&lt;/a&gt; is a network monitoring specification. It&amp;rsquo;s very simple to understand. A set of devices (routers, switches, servers) emit counters and packet samples, and they all flow to a collector. The collector then aggregates them.&lt;/p&gt;

&lt;p&gt;This is how it all works as a short summary.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Devices generate sFlow datagrams. I started to write a &lt;a href=&#34;https://github.com/PreetamJinka/gohsflowd&#34;&gt;host sFlow daemon&lt;/a&gt; in Go. Since that isn&amp;rsquo;t finished, I&amp;rsquo;m using the original hsflowd. I also have Brocade switches that generate sFlow datagrams in hardware.&lt;/li&gt;
&lt;li&gt;Datagrams get decoded using my &lt;a href=&#34;https://github.com/PreetamJinka/sflow-go&#34;&gt;sFlow decoding package&lt;/a&gt;. This one works pretty well!&lt;/li&gt;
&lt;li&gt;Packet samples get decoded using my &lt;a href=&#34;https://github.com/PreetamJinka/protodecode&#34;&gt;protocol decoding package&lt;/a&gt;. This is a rewrite of what I wrote a few months ago.&lt;/li&gt;
&lt;li&gt;Decoded headers get organized into &amp;ldquo;flows&amp;rdquo; and sent to my &lt;a href=&#34;https://github.com/PreetamJinka/flowtrack&#34;&gt;flowtrack&lt;/a&gt; package. This one is an MVP that needs to be rewritten.&lt;/li&gt;
&lt;li&gt;sFlow counter records are simply numbers, so they simply get aggregated in &lt;a href=&#34;https://github.com/PreetamJinka/cistern/blob/master/metrics.go&#34;&gt;Cistern&amp;rsquo;s metric registry&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Every N seconds, the state of all the metrics is recorded into a &lt;a href=&#34;https://github.com/PreetamJinka/metricstore&#34;&gt;metricstore&lt;/a&gt;. A metricstore is essentially an organized set of linked lists, specifically &lt;a href=&#34;https://github.com/PreetamJinka/listmap&#34;&gt;listmaps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s a crude HTTP API to fetch all of the state (including the time series for metrics) as JSON.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;examples:d5f7aecad5355d283ad71d247279c609&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;This is something I came up with that uses Angular.JS and Cistern. The frontend polls occasionally to get a list of hosts, and then queries for the current values of certain metrics. It&amp;rsquo;s all completely dynamic. As new hosts start sending their sFlow datagrams, Cistern automatically creates new entries in the registry and starts supplying the frontend with an updated list of hosts.
&lt;img src=&#34;http://static.misfra.me/images/posts/state-of-the-state-part-ii/realtime.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s some information from packet headers. As you can tell, there&amp;rsquo;s a single IP address opening a bunch of connections to port 22 for a bunch of destination IP addresses. This is most likely a bot trying to find active hosts listening on port 22.
&lt;img src=&#34;http://static.misfra.me/images/posts/state-of-the-state-part-ii/portscan.png&#34; alt=&#34;Port scan&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;This is a quick demo using the HTTP interface to fetch time series for a metric. I used D3.js to plot the graph.
&lt;img src=&#34;http://static.misfra.me/images/posts/state-of-the-state-part-ii/d3.png&#34; alt=&#34;D3.js&#34; /&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Does that sound like a lot? Well, it took me a while to get this far! Part of the reason is that I iterate a lot. Cistern is the composition of a bunch of stuff that I&amp;rsquo;ve written in short bursts. I started writing some &lt;a href=&#34;https://github.com/PreetamJinka/flowtools&#34;&gt;flow tools&lt;/a&gt; in February, and wrote the first &lt;a href=&#34;https://github.com/PreetamJinka/flow-collector&#34;&gt;flow collector&lt;/a&gt; in June. You&amp;rsquo;ll notice that Cistern has a lot of code / ideas in common with those.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s still a lot of other work to do. I&amp;rsquo;m probably going to work on some D3.js and AngularJS stuff. I need to work on my JavaScript :). I will have to update the storage engine to partition by time so I can get rid of older data. It should be easy enough. I also need to work on detecting scanners, and I have a couple of ideas on how to do that which involves a simple analysis of flows.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s kind of cool that I was able to do all this stuff (from scratch!) in my free time. Gettin&amp;rsquo; good at this. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BeagleBone Black</title>
      <link>http://misfra.me/beaglebone</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/beaglebone</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/beaglebone/beaglebone.jpg&#34; alt=&#34;BeagleBone Black&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a huge fan of the &lt;a href=&#34;http://beagleboard.org/black&#34;&gt;BeagleBone Black&lt;/a&gt;. It&amp;rsquo;s an alternative
to the popular Raspberry Pi. I&amp;rsquo;m such a fan that I got my second one a few days ago.&lt;/p&gt;

&lt;p&gt;This website runs on a BeagleBone Black. It&amp;rsquo;s powered via USB, and it&amp;rsquo;s connected to
my switch at a data center. For some reason I choose to use this credit card-sized
ARM computer to host stuff instead of a VM. It reminds me of the little VMs I used to
work with in middle school. I used to ask my parents to rent VMs for me during my summers.
They&amp;rsquo;d spend maybe $10 a month for a couple of months and I&amp;rsquo;d play around with it. Root access on a
Linux VM with a tiny bit of RAM and a public IP? The possibilities were endless!&lt;/p&gt;

&lt;p&gt;You can think about a VM, running on some beefy server somewhere, that is completely opaque
to you in terms of hardware and stuff, and then you can look at this little thing
that can fit into your pocket, watch its lights blinking, and it&amp;rsquo;s just so
magical. I would&amp;rsquo;ve &lt;em&gt;loved&lt;/em&gt; something like this when I was in middle school.&lt;/p&gt;

&lt;p&gt;Anyway, the first BeagleBone is running some other stuff in addition to this blog.
It hosts my Twilio endpoint and has a bunch of scripts that I use for automation.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not exactly sure what I&amp;rsquo;m going to use this second one for, but I have plugged
in a USB audio interface and played my guitar through it. I&amp;rsquo;ve been trying to get a
simple reverb effect but audio programming with callbacks and stuff is crazy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overdue invoices</title>
      <link>http://misfra.me/overdue-invoices</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/overdue-invoices</guid>
      <description>&lt;p&gt;I used to subscribe to CloudLinux but then stopped. I do not use CloudLinux anymore.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still getting invoiced every month even though I&amp;rsquo;m not using my license at all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/overdue-invoices/cloudlinux.png&#34; alt=&#34;CloudLinux email&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;And so, every month, my balance goes up. I will not pay it. Why should I? I didn&amp;rsquo;t use their
service! It&amp;rsquo;s too much of a hassle, in my opinion, to contact them about it. Eh.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the thing: I can&amp;rsquo;t get another license from them unless I cough up the $42.00, right?
That discourages me from subscribing again.&lt;/p&gt;

&lt;p&gt;You know, the similar happened to me with &lt;a href=&#34;https://www.ksplice.com/&#34;&gt;Ksplice Uptrack&lt;/a&gt;. I
started using Ksplice before the Oracle purchase, so I had a few licenses and installed it
on all of my servers. Somehow I think I forgot to pay my invoices and now I have like a $70+ balance.
I&amp;rsquo;m not using Ksplice on my servers anymore. Well, I can&amp;rsquo;t install it now without paying my bills, right?
So, yeah. Don&amp;rsquo;t tell Oracle :P.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re a service company, please:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don&amp;rsquo;t bill me for things I don&amp;rsquo;t use.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t keep my service going if I don&amp;rsquo;t pay the bill.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Nontrivial pipes</title>
      <link>http://misfra.me/nontrivial-pipes</link>
      <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/nontrivial-pipes</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m going to take a simple concept, UNIX pipes, and basically frame (or misframe?) a nontrivial scenario.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /proc/cpuinfo | grep CPU | wc -l
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We all know pipes, of course. You pipe stuff in and pipe stuff out. Easy enough. I think the piping in the example above is &lt;em&gt;context-free&lt;/em&gt;. Each pipe has a stream of continuous bytes for its input and output. This is the simplest case.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s say we&amp;rsquo;re writing a program to simulate a user running a CLI application, like R. In our simulator, we&amp;rsquo;ll execute &lt;code&gt;R&lt;/code&gt; as a child process. Then, since R is a CLI program, we&amp;rsquo;ll have to work with its stdin and stdout file descriptors (which are pipes).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy enough to simulate a user typing in commands &amp;ndash; simply write data to R&amp;rsquo;s stdin. To get the output, read from its stdout. We know this, and the entire scenario is simple enough. Let&amp;rsquo;s also call it &amp;ldquo;context-free.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;But what if you wanted to capture the output for each command separately? Now we&amp;rsquo;re moving away from the context-free, infinite streams of bytes. It&amp;rsquo;s more like chunked data. If you send R&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c(1:20)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you&amp;rsquo;ll get back&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously the response, the printed vector, is part of the same &amp;ldquo;chunk&amp;rdquo; but the &amp;ldquo;context-free pipe&amp;rdquo; has no awareness of that.&lt;/p&gt;

&lt;p&gt;This is where things get nontrivial. Our simulator needs to send &lt;code&gt;c(1:20)&lt;/code&gt;, or some other form of input, and read the response from R. How long is the response? How many bytes do I need to read from the pipe? How will I know when it has finished outputting data?&lt;/p&gt;

&lt;h2 id=&#34;conclusion:87101b1d5eb6d322c3b858a6a1decf48&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Please, don&amp;rsquo;t actually build a simulator like this for R. There are better ways to do this, like telling R to &lt;a href=&#34;http://www.statmethods.net/interface/io.html&#34;&gt;output to a file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, if you &amp;ldquo;zoom out&amp;rdquo; and think about UNIX pipes in general, these concepts are important. This is why most protocols over TCP include a payload length. You can think of TCP sockets as pipes, and think about how these questions are formed in that scenario.&lt;/p&gt;

&lt;p&gt;Anyway, I hope that made sense. Monday night thoughts :P.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on Career/Job/Internship Fairs</title>
      <link>http://misfra.me/thoughts-on-career-job-internship-fairs</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/thoughts-on-career-job-internship-fairs</guid>
      <description>&lt;p&gt;This is just my opinion. I don&amp;rsquo;t like career fairs. I don&amp;rsquo;t think they are of any value &lt;em&gt;to me.&lt;/em&gt; Most people might disagree with what I have to say, and that&amp;rsquo;s totally cool. I&amp;rsquo;m not like most people.&lt;/p&gt;

&lt;p&gt;Career fairs are way too competitive. It&amp;rsquo;s probably &lt;em&gt;the worst&lt;/em&gt; place to differentiate yourself. Everyone&amp;rsquo;s in a suit. Everyone&amp;rsquo;s carrying around their resumes, and everyone basically gives the same rehearsed intro, right? It&amp;rsquo;s also annoying to think that there will always be someone better than you out there. A nicer resume, a higher GPA, a better suit, etc.&lt;/p&gt;

&lt;p&gt;Technical interviews sound horrible. I&amp;rsquo;ve never had one like the ones I hear people talk about. The most I&amp;rsquo;ve had to do was hand someone my resume and just chat about what I&amp;rsquo;ve worked on, and I &lt;em&gt;love&lt;/em&gt; doing that! Those puzzle things sound horrible too. Have you seen &lt;a href=&#34;http://f.cl.ly/items/313L3D1K0G102P0z0B0I/Screen%20Shot%202012-07-18%20at%2012.35.56%20PM.png&#34;&gt;TJ Holowaychuk&amp;rsquo;s response&lt;/a&gt; to a Facebook recruiter? I feel like I&amp;rsquo;d do something like that too.&lt;/p&gt;

&lt;p&gt;Anyway, that&amp;rsquo;s what I&amp;rsquo;m thinking about these days as I see students walk around all dressed up to impress potential employers. Just another part of &lt;a href=&#34;http://misfra.me/working-and-growing-up&#34;&gt;working and growing up&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How can you be exceptional without being an exception? Are you just going to join some big crowd and hope you&amp;rsquo;re going to get picked?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People who stand around waiting for someone to &amp;ldquo;give them a chance&amp;rdquo; are rarely the ones who materially impact the world.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Cursive â€˜fâ€™</title>
      <link>http://misfra.me/cursive-f</link>
      <pubDate>Mon, 08 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/cursive-f</guid>
      <description>&lt;p&gt;I was sitting in one of my math classes the other day (how specific!)
and noticed that my professor had an interesting way of writing his
lowercase cursive &amp;lsquo;f&amp;rsquo;. You know how the bottom loop thing should
go to the right? He wrote his going to the left. I thought it was
weird because I thought it wasn&amp;rsquo;t correct. Then I thought, &amp;ldquo;wait,
have I been writing my &amp;lsquo;f&amp;rsquo; wrong?!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Later that day, I started doing homework for another class. I
flipped to the end of my textbook to check over my answers and saw
a sheet of paper with some notes on it. This is a rental, so it&amp;rsquo;s
probably from the previous person. I noticed something interesting
about this person&amp;rsquo;s cursive &amp;lsquo;f&amp;rsquo;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/cursive-f/f-note.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s exactly how my professor does it! I had to make sure &lt;em&gt;I&lt;/em&gt; wasn&amp;rsquo;t
doing it wrong, so I asked an apartmentmate to write a cursive &amp;lsquo;f&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/cursive-f/f-post-it.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;#2 and #3 are his, #1 is mine, and #4 is how the weird people do it :P.
How&amp;rsquo;d they pick that up? It&amp;rsquo;s more of a cursive long s, but no one uses
that anymore!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.misfra.me/images/posts/cursive-f/long-s-google.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The first image says &amp;ldquo;1834.&amp;rdquo; Interesting&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LLVM</title>
      <link>http://misfra.me/llvm</link>
      <pubDate>Thu, 04 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/llvm</guid>
      <description>&lt;p&gt;For some reason, instead of studying for my math quiz today (it&amp;rsquo;s past
midnight right now), I decided to play around with LLVM. One of my
homework exercises was to solve the Fibonacci difference equation,&lt;/p&gt;

&lt;p&gt;F(n) = F(n-1) + F(n-2) for n &amp;gt;= 2,&lt;/p&gt;

&lt;p&gt;so that&amp;rsquo;s why I wrote a
recursive Fibonacci function.&lt;/p&gt;

&lt;p&gt;I think it&amp;rsquo;s pretty cool considering I never formally learned
assembly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;declare i32 @printf(i8* noalias nocapture, ...)

@numPrintStr = constant [27 x i8] c&amp;quot;#%d Fibonacci number is %d\00&amp;quot;

define void @printNumber(i32 %a) {
	%f = call i32 @fib(i32 %a)
	call i32 (i8*, ...)* @printf(
		i8* getelementptr([27 x i8]* @numPrintStr, i32 0, i32 0),
		i32 %a, i32 %f)

	ret void
}

define i32 @fib(i32 %a) {
entry:
	switch i32 %a, label %recur [ i32 1, label %base
	                              i32 2, label %base ]

base:
	ret i32 1

recur:
	%prev1 = sub i32 %a, 1
	%prev2 = sub i32 %a, 2
	%prev1val = call i32 @fib(i32 %prev1)
	%prev2val = call i32 @fib(i32 %prev2)
	%sum = add i32 %prev1val, %prev2val
	ret i32 %sum
}

define i32 @main() {
entry:
	call void @printNumber(i32 40)
    ret i32 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ llc fib.ll -o fib.s
$ gcc fib.s -o fib
$ ./fib
#40 Fibonacci number is 102334155
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s probably a way to generate a binary without using
gcc, but it&amp;rsquo;s late and I&amp;rsquo;m too lazy to figure it out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Streaming HTTP</title>
      <link>http://misfra.me/streaming-http</link>
      <pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/streaming-http</guid>
      <description>&lt;p&gt;I just came back from this month&amp;rsquo;s
&lt;a href=&#34;https://wiki.python.org/moin/CharlottesvillePythonUserGroup&#34;&gt;PyCHO&lt;/a&gt; meetup,
and one of the things that we discussed was how to handle many simultaneous
HTTP clients that send data in streams.&lt;/p&gt;

&lt;p&gt;Someone had a project, written in Python of course, that accepted large file
uploads from clients, computed a hash, and sent it to S3. The goal is to
do everything concurrently with minimal resource usage.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not a Python programmer, but as a Go programmer this is very simple to do.
You don&amp;rsquo;t have to worry about threads, processes, coroutines, futures, or
any other concurrency/parallelism primitives as you would with Python. In fact,
the following example doesn&amp;rsquo;t even expose goroutines directly. Even when you
&lt;em&gt;do&lt;/em&gt; start to introduce concurrency primitives directly, they&amp;rsquo;re much easier
to reason about.&lt;/p&gt;

&lt;p&gt;This example is an extremely simplified version of the project that I whipped
up in a couple of minutes. I wouldn&amp;rsquo;t even call it &amp;ldquo;correct,&amp;rdquo; but it&amp;rsquo;s enough
to get the point across.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;crypto/md5&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
)

// HD5Handler computes an MD5 checksum of the HTTP
// body and sends it as a response.
func MD5Handler(w http.ResponseWriter, req *http.Request) {
	hash := md5.New()

	// Copy data from req.Body (an io.Reader) to
	// hash (an io.Writer).
	io.Copy(hash, req.Body)

	req.Body.Close()

	// Write a response
	fmt.Fprintf(w, &amp;quot;%x&amp;quot;, hash.Sum(nil))
}

func main() {
	// Route &amp;quot;/&amp;quot; to the MD5Handler
	http.HandleFunc(&amp;quot;/&amp;quot;, MD5Handler)

	// Start the HTTP server
	err := http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
	if err != nil {
		log.Fatal(&amp;quot;ListenAndServe: &amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is some sample output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ # This creates a 100 MB file of random data
$ dd if=/dev/urandom of=test bs=1M count=100
100+0 records in
100+0 records out
104857600 bytes (105 MB) copied, 7.73638 s, 13.6 MB/s

$ time curl -i -X POST -d @test localhost:8080
HTTP/1.1 100 Continue

HTTP/1.1 200 OK
Date: Wed, 03 Sep 2014 02:28:12 GMT
Content-Length: 32
Content-Type: text/plain; charset=utf-8

97ccb418d79d7f69c71d145bd88c643c
real	0m0.360s
user	0m0.106s
sys	0m0.086s
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>