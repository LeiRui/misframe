<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2013s on Misframe</title>
    <link>http://misfra.me/2013/</link>
    <description>Recent content in 2013s on Misframe</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright &amp;copy; Preetam Jinka</copyright>
    <lastBuildDate>Mon, 30 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://misfra.me/2013/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gambling with cheap RAM</title>
      <link>http://misfra.me/gambling-with-cheap-ram</link>
      <pubDate>Mon, 30 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/gambling-with-cheap-ram</guid>
      <description>

&lt;p&gt;I got an email from &lt;a href=&#34;http://123systems.net/&#34;&gt;123Systems&lt;/a&gt; about a week ago:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://31.media.tumblr.com/678055852db80bb4020e687d71b2cd1a/tumblr_inline_myn1ycfmg41rs73cz.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;First off, I got that email because I used to be a customer of 123Systems. I would &lt;em&gt;not&lt;/em&gt; recommend them if you&amp;rsquo;re looking for a reliable VPS host. I&amp;rsquo;ve had issues with them and their support isn&amp;rsquo;t the best.&lt;/p&gt;

&lt;p&gt;They are, however, really cheap. Read that promotion carefully &amp;ndash; a 2 GB RAM VM for $25 per &lt;em&gt;year&lt;/em&gt;. That&amp;rsquo;s a little more than $2 a month. 3 TB of bandwidth is also a generous amount. They&amp;rsquo;re clearly overselling, but who doesn&amp;rsquo;t?&lt;/p&gt;

&lt;p&gt;With that offer, 123Systems is an order of magnitude cheaper than Digital Ocean.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a mathematics major, so I (should) like math problems. Here&amp;rsquo;s an interesting one&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;background:24bfd17816168963d7f3ac74e32af631&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;123Systems states that they have a &amp;ldquo;99.9% uptime guarantee.&amp;rdquo; Here&amp;rsquo;s what that basically means to most people, if you&amp;rsquo;re not sure: your service will be up 99.9% of the time (0.1% of one month is 43.8 minutes), or we&amp;rsquo;ll give you a service credit.&lt;/p&gt;

&lt;p&gt;So, it&amp;rsquo;s not really &lt;em&gt;guaranteed&lt;/em&gt; to be up 99.9% of the time. Let&amp;rsquo;s be pessimistic and say that a server will be down for a maximum of 15 hours total.&lt;/p&gt;

&lt;h2 id=&#34;the-problem-s:24bfd17816168963d7f3ac74e32af631&#34;&gt;The problem(s)&lt;/h2&gt;

&lt;p&gt;Suppose you&amp;rsquo;re a data gambler. You&amp;rsquo;re willing to lose all of your data, but you&amp;rsquo;d rather not. You want to store all of your data in 123Systems VMs, and only in memory. You&amp;rsquo;ll have replica VMs, so you&amp;rsquo;ll only lose your data if &lt;em&gt;all&lt;/em&gt; replicas are down. At any given hour, a VM is either up or down for that entire hour. All VMs are down for 15 hours total each month (720 hours), and their downtime is distributed randomly. When a VM is back up, it can rereplicate data back.&lt;/p&gt;

&lt;p&gt;If you had N replicas, what&amp;rsquo;s the probability that your data will be safe after a month (720 hours)? In other words, what&amp;rsquo;s the probability that at least one VM was up for each hour in a month?&lt;/p&gt;

&lt;p&gt;How many replicas would you need to ensure that the probability of not losing your data is 99.99%? How much would that cost (assuming $2 a VM)?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you have an answer, or if there&amp;rsquo;s not enough information to solve this, let me know on &lt;a href=&#34;https://twitter.com/preetamjinka&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on lists, trees, and other data structures</title>
      <link>http://misfra.me/thoughts-on-lists-trees-and-other-data-structures</link>
      <pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/thoughts-on-lists-trees-and-other-data-structures</guid>
      <description>

&lt;p&gt;This past spring, I used to go to a study room in Clemons after dinner to work on problem sets. Those rooms have white boards, which I often used to check over work or write some notes as I did my homework. After I was done with my homework, I&amp;rsquo;d start drawing trees and come up with rotation algorithms. Sure, there are algorithms out there for balanced trees, but I always got the feeling that they were really generic and hard to improve.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/500px-Red-black_tree_example.svg.png&#34; alt=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/500px-Red-black_tree_example.svg.png&#34; /&gt;

(From &lt;a href=&#34;http://en.wikipedia.org/wiki/File:Red-black_tree_example.svg&#34;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;That image represents a &lt;a href=&#34;http://en.wikipedia.org/wiki/Red-black_tree&#34;&gt;red-black tree&lt;/a&gt;, which is a &lt;em&gt;self-balancing&lt;/em&gt; tree. A red-black tree balances itself after every insert, which is done by &lt;a href=&#34;http://en.wikipedia.org/wiki/Tree_rotation&#34;&gt;rotations&lt;/a&gt;. Looking at a picture of a tree rotation makes it a lot simpler to understand. It&amp;rsquo;s important to balance a tree and minimize its overall height to maximize the search efficiency.&lt;/p&gt;

&lt;p&gt;I thought rebalancing a tree was too computationally expensive. If you had to do it after every insert, it seems like you&amp;rsquo;d really slow things down. What if you didn&amp;rsquo;t rebalance after every insert? If you inserted values sequentially without rebalancing after every insert, you&amp;rsquo;d just have a linked list, right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Singly-linked-list.svg/500px-Singly-linked-list.svg.png&#34; alt=&#34;Linked list&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I think I then started to think about how to turn a linked list into a balanced tree. I forget where that took me :). I did come up with a tree that you can balance on-demand (on &lt;a href=&#34;https://github.com/PreetamJinka/dreamtree&#34;&gt;GitHub&lt;/a&gt;). I don&amp;rsquo;t remember whether or not it works! Even if it does, it&amp;rsquo;s probably very inefficient. I think part of it started off as a napkin doodle. Anyway, at the very least, it helped me learn more about &lt;a href=&#34;golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Over the summer, a close friend told me about skip lists:
&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/8/86/Skip_list.svg/1000px-Skip_list.svg.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Skip_list&#34;&gt;Skip lists&lt;/a&gt; are essentially layered linked lists. The higher levels are &amp;ldquo;fast lanes,&amp;rdquo; which allow you to &lt;em&gt;skip&lt;/em&gt; nodes. Here&amp;rsquo;s the great thing about skip lists: they have the same average time complexity of balanced binary search trees (O(log n)), &lt;em&gt;and&lt;/em&gt; they don&amp;rsquo;t require balancing! That&amp;rsquo;s perfect!&lt;/p&gt;

&lt;h2 id=&#34;what-s-the-point:bd2ade12ca8ba7e16e6273bd1a599e86&#34;&gt;What&amp;rsquo;s the point?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve come to realize that if you&amp;rsquo;re going to build a database, you need to make sure you pick the right data structures. When I started thinking about this stuff &lt;a href=&#34;http://misfra.me/writing-a-database&#34;&gt;last March&lt;/a&gt;, I think I assumed that once I pick a couple of things that seemed to work, everything else would fall into place. I slowly learned otherwise.&lt;/p&gt;

&lt;h2 id=&#34;inspiration-from-datomic:bd2ade12ca8ba7e16e6273bd1a599e86&#34;&gt;Inspiration from Datomic&lt;/h2&gt;

&lt;p&gt;Earlier this month, Craig Andera (&lt;a href=&#34;https://twitter.com/craigandera&#34;&gt;@craigandera&lt;/a&gt;) came to talk about &lt;a href=&#34;http://www.datomic.com/&#34;&gt;Datomic&lt;/a&gt;. Craig mentioned how Datomic is centered around time and facts. In the Datomic world, a database has facts and, and if something is a fact at a certain point in time, it always stays a fact. But facts might not be facts later on in time, or previously in time.&lt;/p&gt;

&lt;p&gt;What I really liked about Datomic was that you can look at the data (or facts!) which exist right now, but you can also go back in time to see what was there before. You can &lt;em&gt;observe&lt;/em&gt; the state of the database in the past. That&amp;rsquo;s cool!&lt;/p&gt;

&lt;h2 id=&#34;persistent-data-structures:bd2ade12ca8ba7e16e6273bd1a599e86&#34;&gt;Persistent data structures&lt;/h2&gt;

&lt;p&gt;I think it&amp;rsquo;s sort of interesting how databases seem to take on the characteristics of what they&amp;rsquo;re developed in. Datomic is written in Clojure, and Craig mentioned several times how certain parts of Datomic are like parts of Clojure.&lt;/p&gt;

&lt;p&gt;Clojure&amp;rsquo;s a functional language, and (please correct me if I&amp;rsquo;m wrong!) I think functional languages are based around immutable data types. If you have a tree, for example, and you append something to it, you&amp;rsquo;d get a completely new tree. The old tree never changes. It&amp;rsquo;s &lt;em&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Persistent_data_structure&#34;&gt;persistent&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Internally, Datomic uses an append-only, persistent tree. Neat!&lt;/p&gt;

&lt;h2 id=&#34;lexicon-an-ordered-list-and-a-fickle-key-value-store:bd2ade12ca8ba7e16e6273bd1a599e86&#34;&gt;Lexicon, an ordered list, and a fickle key-value store&lt;/h2&gt;

&lt;p&gt;Writing a database is a hard task, so I had to break it down into smaller ones. A few months ago, I decided I really had to get down to the core of this thing and build it up from the ground up just as I want it.&lt;/p&gt;

&lt;p&gt;I created &lt;a href=&#34;https://github.com/PreetamJinka/lexicon&#34;&gt;lexicon&lt;/a&gt;, which is an ordered key-value map package for Go. Lexicon uses another package I wrote, which essentially added ordering to the &lt;code&gt;container/list&lt;/code&gt; package that&amp;rsquo;s in Go&amp;rsquo;s standard library. I kept it simple enough to not be restrictive, yet still very useful.&lt;/p&gt;

&lt;p&gt;After I had a decent version of lexicon, it didn&amp;rsquo;t take long to write a simple TCP server wrapper around it and have a &lt;em&gt;very&lt;/em&gt; basic key-value store. I think at that point, I thought: whoa&amp;hellip; that was easy! I think I was able to get replication working (well, trivial replication) in one sitting.&lt;/p&gt;

&lt;h2 id=&#34;it-gets-complicated:bd2ade12ca8ba7e16e6273bd1a599e86&#34;&gt;It gets complicated.&lt;/h2&gt;

&lt;p&gt;Eventually, I started thinking about how I could keep replication safe. Originally, a &amp;ldquo;primary&amp;rdquo; would just broadcast the commands its got to its replicas, but that&amp;rsquo;s not safe. What if a replica shuts down? How do we know that the replica is at the same state at the primary?&lt;/p&gt;

&lt;p&gt;Another issue was that I wanted to add some form of transactions. I wanted to be able to put in transactional logic. Hmm&amp;hellip; oh! I like how CouchDB has &lt;a href=&#34;http://en.wikipedia.org/wiki/Multiversion_concurrency_control&#34;&gt;multiversion concurrency control&lt;/a&gt; using revisions for each document. Maybe I could have a version for each key!&lt;/p&gt;

&lt;p&gt;These two problems seemed rather orthogonal. I couldn&amp;rsquo;t figure out a single solution for both of them. I think at this point, I just stopped working on this.&lt;/p&gt;

&lt;p&gt;And then I heard about Datomic.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! I don&amp;rsquo;t need versions for each key, but rather versions for the entire database! That way I could if transactions are operating against an old version, &lt;em&gt;and&lt;/em&gt; I could keep replicas synchronized by comparing versions! Now, how do I add versions to this database thing? That&amp;rsquo;s when things got tough.&lt;/p&gt;

&lt;p&gt;An easy way to store versions is to make raw copies. That&amp;rsquo;s not efficient by any means! That would be a waste of a lot of space. The answer seemed to be a persistent data structure. Somehow I stumbled onto &lt;a href=&#34;http://en.wikipedia.org/wiki/Treap&#34;&gt;treaps&lt;/a&gt;, and found a persistent treap package for Go. It didn&amp;rsquo;t take long before I had versions supported in lexicon.&lt;/p&gt;

&lt;h2 id=&#34;the-issue-with-treaps:bd2ade12ca8ba7e16e6273bd1a599e86&#34;&gt;The issue with treaps&lt;/h2&gt;

&lt;p&gt;The most important issue that I&amp;rsquo;ve noticed with my versioned treap stuff was that it&amp;rsquo;s &lt;em&gt;incredibly&lt;/em&gt; memory-hungry. It just seemed to have such a massive overhead. Oh and, of course, a treap is a tree. There&amp;rsquo;s rebalancing. It&amp;rsquo;s relatively expensive.&lt;/p&gt;

&lt;p&gt;I had to get rid of the treaps! I needed a &lt;em&gt;new&lt;/em&gt; data structure. A versioned skip list! I tried to find a persistent skip list, but then stumbled onto this &lt;a href=&#34;http://stackoverflow.com/questions/3489560/purely-functional-concurrent-skip-list&#34;&gt;comment on Stack Overflow&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The property of skip lists that makes them good for concurrent updates (namely that most additions and subtractions are local) also makes them bad for immutability (namely that a lot of earlier items in the list point eventually to the later items, and would have to be changed).
[&amp;hellip;]
Thus, tree structures are better for immutability (as the damage is always locally limited&amp;ndash;just the node you care about and its direct parents up through the root of the tree).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Argh. Okay, so I have to make it mutable, since I&amp;rsquo;d like to make this write-intensive. I tried to look for a mutable, versioned skip list. I couldn&amp;rsquo;t find one&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;writing-a-list:bd2ade12ca8ba7e16e6273bd1a599e86&#34;&gt;Writing a list&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;My sister: What are you doing?&lt;/p&gt;

&lt;p&gt;Me: Making a list.&lt;/p&gt;

&lt;p&gt;My sister: And checking it twice?&lt;/p&gt;

&lt;p&gt;Me: -_-&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This past week, I wrote &lt;a href=&#34;https://github.com/PreetamJinka/vlmap&#34;&gt;vlmap&lt;/a&gt;, which is a versioned, ordered skip list map written in C. Lots of words, but what do they mean?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s ordered. The keys are stored in order (lexicographically), so it&amp;rsquo;s possible to do range reads over the data structure.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s versioned. I can see what the list looked like in the past. This means I can do snapshot reads!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a map, so it&amp;rsquo;s an associative array.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s written in C. I think I chose to write it in C because I got pissed at Go&amp;rsquo;s garbage collector while I was testing out the treaps :P. This was actually very significant. I spent a few days working with Valgrind to make sure I wasn&amp;rsquo;t leaking any memory. I think this was my first big C project, so I definitely learned a few things along the way. Besides that, since it&amp;rsquo;s written in C, I can reuse it in many languages, including Go. In fact, the primary test for it right now is &lt;a href=&#34;https://github.com/PreetamJinka/vlmap/blob/67ff1585fcea/test/test.go&#34;&gt;written in Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m really, &lt;em&gt;really&lt;/em&gt; proud of this vlmap project. I think it&amp;rsquo;s incredibly neat to have a versioned data structure. You can even iterate through a snapshot! That&amp;rsquo;s awesome!&lt;/p&gt;

&lt;h2 id=&#34;speed:bd2ade12ca8ba7e16e6273bd1a599e86&#34;&gt;Speed&lt;/h2&gt;

&lt;p&gt;A skip list is much, much better. Not only is it faster, it also uses significantly less memory. I have a couple of pprof-generated profiles below. Using only inserts, I got&amp;hellip; 17043 ns/operation for a treap, 3911 ns / operation for a skip list.&lt;/p&gt;

&lt;p&gt;Treap:
&lt;a href=&#34;http://static.misfra.me/images/treap.png&#34;&gt;&lt;img src=&#34;http://static.misfra.me/images/treap.png&#34; alt=&#34;&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Skip list:
&lt;a href=&#34;http://static.misfra.me/images/skiplist.png&#34;&gt;&lt;img src=&#34;http://static.misfra.me/images/skiplist.png&#34; alt=&#34;&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts:bd2ade12ca8ba7e16e6273bd1a599e86&#34;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;I think this has been my longest blog post so far&amp;hellip; and I&amp;rsquo;m making it even longer right now! I learned a lot over these past few days, weeks, and months. I hope you learned a thing or two from this blog post as well. There&amp;rsquo;s still a &lt;em&gt;lot&lt;/em&gt; out there to learn. Lock-free algorithms and thread-safety are probably what I&amp;rsquo;m going to look at next, but I&amp;rsquo;m also going to think about the next big challenge for this database I&amp;rsquo;m building.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have a comment system, but if you have a question or a comment, hit me up on Twitter (&lt;a href=&#34;https://twitter.com/PreetamJinka&#34;&gt;@PreetamJinka&lt;/a&gt;)!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C is weird.</title>
      <link>http://misfra.me/c-is-weird</link>
      <pubDate>Thu, 26 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/c-is-weird</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Falling off the end of a function that is declared to return a value (without explicitly returning a value) leads to undefined consequences.&lt;/p&gt;

&lt;p&gt;— &lt;a href=&#34;http://stackoverflow.com/questions/293499/what-happens-if-you-dont-return-a-value-in-c&#34;&gt;http://stackoverflow.com/questions/293499/what-happens-if-you-dont-return-a-value-in-c&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah. I forgot to write a &lt;code&gt;return&lt;/code&gt; line in a function that was supposed to return a pointer. I didn&amp;rsquo;t notice it for days since the program worked fine &amp;ndash; the right thing was being returned!&lt;/p&gt;

&lt;p&gt;I tried it out on my BeagleBone Black and it looked like &lt;code&gt;calloc()&lt;/code&gt; was returning &lt;code&gt;NULL&lt;/code&gt;. Weird! Then I noticed that I wasn&amp;rsquo;t actually returning anything.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s interesting that these platforms have different results.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/PreetamJinka/vlmap/commit/49ed1e966abc491#diff-e08843ac041a0a54fa44b93b13f7687cL31&#34;&gt;Here&amp;rsquo;s my oops.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apparently the program put the result of &lt;code&gt;calloc()&lt;/code&gt; onto the &lt;a href=&#34;http://stackoverflow.com/questions/7280877/why-and-how-does-gcc-compile-a-function-with-a-missing-return-statement&#34;&gt;register used for the return value on x86&lt;/a&gt;! Neat!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haste.</title>
      <link>http://misfra.me/haste</link>
      <pubDate>Sat, 21 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/haste</guid>
      <description>&lt;p&gt;I guess people call these types of posts &amp;ldquo;post mortems.&amp;rdquo; Here we go.&lt;/p&gt;

&lt;p&gt;I got this email this morning:
&lt;img src=&#34;https://31.media.tumblr.com/a84ce95106b1082757750382100c6cdc/tumblr_inline_my67tzQy421rs73cz.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I generally don&amp;rsquo;t trust alerts with 100% confidence, so I started to check on it. It was weird: it was responding to pings and establishing TCP connections, but it wouldn&amp;rsquo;t respond to anything. SSH wouldn&amp;rsquo;t work either.&lt;/p&gt;

&lt;p&gt;I disabled and enabled its ethernet port from the switch. It didn&amp;rsquo;t fix it.&lt;/p&gt;

&lt;p&gt;The next step was to give it a power cycle. I can do that remotely with a switched PDU. I think buying that was a great investment. It&amp;rsquo;s incredibly annoying to drive over to the data center to push a button, and I figured it wouldn&amp;rsquo;t be practical for me to do it when I&amp;rsquo;m down in Charlottesville for college.&lt;/p&gt;

&lt;p&gt;By this time, I&amp;rsquo;m thinking that I have no way of fixing it from home, so I need to go on-site.&lt;/p&gt;

&lt;p&gt;As I get ready and head to the DC, I think about the worst case scenario. It couldn&amp;rsquo;t be a kernel panic or weird, horrific hardware failure since Haste obviously was able to boot up and get assign itself the right IP address. It&amp;rsquo;s probably something software related.&lt;/p&gt;

&lt;p&gt;I got there and plugged in a monitor and noticed it wasn&amp;rsquo;t responsive. I gave it another power cycle. Now, what happened next surprised me a lot.&lt;/p&gt;

&lt;p&gt;As it started booting up, I saw the stream of green &lt;code&gt;[OK]&lt;/code&gt;s, as expected. Then I noticed OOM (out of memory) errors, and exim (a mail transfer agent) kept getting killed. Out of memory?!&lt;/p&gt;

&lt;p&gt;Now, I know &lt;em&gt;for sure&lt;/em&gt; that Haste had plenty of RAM for its normal operation. It&amp;rsquo;s a cPanel server, and 4 GB is plenty. It usually uses &amp;lt; 1 GB. Well, at least I found out what the issue was. It needs more RAM.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://bitcable.com/&#34;&gt;Bitcable&lt;/a&gt; also hosts VMs, and my #1 priority is to keep VMs up and running as reliably as possible. With that in mind, I have a spare VM host, Storm, in the cabinet. It doesn&amp;rsquo;t do much &amp;ndash; I use it sometimes to experiment with network configurations without touching hardware with customers. The great thing about Storm is that it&amp;rsquo;s an &lt;em&gt;exact&lt;/em&gt; copy of the other servers. Should anything go wrong with the others, I can simply do a hard drive swap and everything should be fine.&lt;/p&gt;

&lt;p&gt;Storm had 16 GB of RAM. Haste had 4. Besides those, the two are exactly the same. So I swapped hard drives. It worked, except for the networking. They don&amp;rsquo;t have the same MAC addresses.&lt;/p&gt;

&lt;p&gt;I figured I didn&amp;rsquo;t know how cPanel handled MAC address changes, and it might be a bad idea to change hardware like that, so I ended up swapping the RAM. After 1 hour and 51 minutes of downtime, everything was back up.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what Haste&amp;rsquo;s memory usage looks like right now:
&lt;img src=&#34;https://31.media.tumblr.com/627efe43500f84024cb28d1eaae7e2a8/tumblr_inline_my699yKi9O1rs73cz.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Again, an OOM event is really unexpected.&lt;/p&gt;

&lt;p&gt;So what in the world caused that out-of-memory issue? Was it perhaps a DOS vulnerability? Did cPanel explode on me? Unfortunately, it looks like I didn&amp;rsquo;t add Haste to my &lt;a href=&#34;http://observium.org/&#34;&gt;Observium&lt;/a&gt; setup (doh!). But, would that have helped? Observium polls SNMP counters every 5 minutes. And it doesn&amp;rsquo;t even track processes. It wouldn&amp;rsquo;t have been useful, in my opinion.&lt;/p&gt;

&lt;p&gt;The issue right now isn&amp;rsquo;t that there was downtime. The issue is that something bad happened and I have no idea why. Maybe I need a high-resolution monitoring system to help diagnose issues like this! ;)&lt;/p&gt;

&lt;p&gt;Lessons learned (or reiterated):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spares are &lt;em&gt;really, really helpful.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Physical hardware is annoying. Isolating this to a VM would mean all of this hardware swapping nonsense wouldn&amp;rsquo;t be an issue.&lt;/li&gt;
&lt;li&gt;Remotely manageable hardware is also &lt;em&gt;really, really helpful.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;High resolution monitoring is a must.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Don&#39;t panic! Type assertion safety.</title>
      <link>http://misfra.me/dont-panic-type-assertion-safety</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/dont-panic-type-assertion-safety</guid>
      <description>

&lt;p&gt;Go&amp;rsquo;s &lt;code&gt;container/heap&lt;/code&gt; package documentation has an &lt;a href=&#34;http://golang.org/pkg/container/heap/#example__intHeap&#34;&gt;example&lt;/a&gt; of an integer heap. Here&amp;rsquo;s an interesting part of it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (h *IntHeap) Push(x interface{}) {
    // Push and Pop use pointer receivers because they modify the slice&#39;s length,
    // not just its contents.
    *h = append(*h, x.(int))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a little problem here. The point is, you shouldn&amp;rsquo;t copy/paste that integer heap example into a package that you&amp;rsquo;re going to use.&lt;/p&gt;

&lt;p&gt;The last line (ignoring the brace) has a type assertion. &lt;code&gt;x&lt;/code&gt; is an &lt;code&gt;interface{}&lt;/code&gt; type, which means its type could be anything, but since &lt;code&gt;Push()&lt;/code&gt; needs to append &lt;code&gt;x&lt;/code&gt; to an array of &lt;code&gt;int&lt;/code&gt;s, you have to assert that &lt;code&gt;x&lt;/code&gt; is an &lt;code&gt;int&lt;/code&gt;. If it&amp;rsquo;s an &lt;code&gt;int&lt;/code&gt;, it&amp;rsquo;s all good. What if it&amp;rsquo;s not an &lt;code&gt;int&lt;/code&gt;?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the type assertion is false, a run-time panic occurs.&lt;/p&gt;

&lt;p&gt;— &lt;a href=&#34;http://golang.org/ref/spec#Type_assertions&#34;&gt;http://golang.org/ref/spec#Type_assertions&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The thing about panics is that they bubble up. If you don&amp;rsquo;t handle a panic by recovering, an entire goroutine will crash and, potentially, so will your entire program. Having a program crash isn&amp;rsquo;t good (unless you want it to, of course)!&lt;/p&gt;

&lt;p&gt;One of the more important things about writing good Go code is to not allow panics to escape package boundaries. It&amp;rsquo;s not unlikely for someone to use a package without digging into its source code, so it should not be their responsibility to know about potentially panicky functions. Robert Griesemer said in a video with Erik Meijer that at the boundary, packages should return values and errors.&lt;/p&gt;

&lt;h2 id=&#34;so-what-should-you-do:da834e269012d2ebcf75370b10b07b72&#34;&gt;So what should you do?&lt;/h2&gt;

&lt;p&gt;Well, Go provides a way to check if type assertions are valid:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;v, ok := x.(T) // ok will be either true or false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But checking &lt;code&gt;ok&lt;/code&gt; gets really annoying if you&amp;rsquo;re doing many type assertions! Then just use &lt;code&gt;recover()&lt;/code&gt;. Here&amp;rsquo;s an example from the InfluxDB &lt;a href=&#34;https://github.com/influxdb/influxdb/blob/13c978abb1a25f56c89f6772e8056af97b91cb89/src/checkers/checkers.go#L16-L28&#34;&gt;source&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (checker *inRangeChecker) Check(params []interface{}, names []string) (result bool, error string) {
    defer func() {
        if v := recover(); v != nil {
            result = false
            error = fmt.Sprint(v)
        }
    }()
    switch params[0].(type) {
    default:
        return false, &amp;quot;can&#39;t compare range for type&amp;quot;
    case int:
        p1 := params[0].(int)
        p2 := params[1].(int)
        p3 := params[2].(int)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;what-if-i-don-t-trust-complicated-code-to-handle-panics:da834e269012d2ebcf75370b10b07b72&#34;&gt;What if I don&amp;rsquo;t trust complicated code to handle panics?&lt;/h2&gt;

&lt;p&gt;Sometimes you may be dealing with a complicated program that depends on a bunch of packages, and you have no idea whether or not there are potentially unhandled panics. One option to deal with this would be to use VividCortex&amp;rsquo;s &lt;a href=&#34;https://github.com/VividCortex/robustly&#34;&gt;Robustly&lt;/a&gt;. You can &lt;code&gt;robustly.Run()&lt;/code&gt; a function and it will recover from panics should they occur.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>State of the... state!</title>
      <link>http://misfra.me/state-of-the-state</link>
      <pubDate>Tue, 17 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/state-of-the-state</guid>
      <description>

&lt;p&gt;Three months ago, I started working on &lt;a href=&#34;https://github.com/PreetamJinka/fickle&#34;&gt;fickle&lt;/a&gt;, a key-value store written in Go. The point of this post is to just jot down some thoughts on where the project is right now and where I&amp;rsquo;d like to take it.&lt;/p&gt;

&lt;h2 id=&#34;adversaria:f2cd37c860827c4af25243a3d0171392&#34;&gt;Adversaria&lt;/h2&gt;

&lt;p&gt;This all goes back to &lt;a href=&#34;http://misfra.me/adversaria&#34;&gt;Adversaria&lt;/a&gt;. It&amp;rsquo;s that small program I wrote in Java to help me log traffic. I use it in combination with a little &lt;a href=&#34;http://www.flotcharts.org/&#34;&gt;Flot&lt;/a&gt; code to make pretty graphs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://31.media.tumblr.com/81741791c5f33df8624d6fc250f88d7e/tumblr_inline_mxyoeqMxeh1rs73cz.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s really simple, which is great, but it&amp;rsquo;s also limited. It&amp;rsquo;d be great to have something that looked as simple but with more functionality.&lt;/p&gt;

&lt;h2 id=&#34;fickle:f2cd37c860827c4af25243a3d0171392&#34;&gt;Fickle&lt;/h2&gt;

&lt;p&gt;This whole thing sort of came together as I went along. Here&amp;rsquo;s a summary of what Fickle actually is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ordered key-value store (I love these!)&lt;/li&gt;
&lt;li&gt;In-memory&lt;/li&gt;
&lt;li&gt;It has networking&lt;/li&gt;
&lt;li&gt;Clients use a simple binary protocol&lt;/li&gt;
&lt;li&gt;Fast reads since values are stored in a hash map&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;at-the-core:f2cd37c860827c4af25243a3d0171392&#34;&gt;At the core&lt;/h2&gt;

&lt;p&gt;Maps in Go are hash maps. I needed an ordered map (that&amp;rsquo;s basically what a key-value store is). I had to write one: &lt;a href=&#34;https://github.com/PreetamJinka/lexicon&#34;&gt;Lexicon&lt;/a&gt;. Lexicon uses another tiny &lt;a href=&#34;https://github.com/PreetamJinka/orderedlist&#34;&gt;package&lt;/a&gt; I wrote, which introduces ordering to Go&amp;rsquo;s &lt;code&gt;container/list&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;entire&lt;/em&gt; thing is built on top of Lexicon. Fickle is essentially a wrapper that exposes the Lexicon data structure over a network. &lt;em&gt;That&amp;rsquo;s all.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;tests:f2cd37c860827c4af25243a3d0171392&#34;&gt;Tests!&lt;/h2&gt;

&lt;p&gt;This is one of the major reasons why I chose Go to write this stuff: tests are &lt;em&gt;easy&lt;/em&gt;.  Here&amp;rsquo;s what tests look like for Fickle:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Test1(t *testing.T) {
    i := NewInstance(&amp;quot;:12345&amp;quot;)
    go i.Start()
    time.Sleep(time.Millisecond * 100) // Wait for it to start up
    conn, err := net.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;:12345&amp;quot;)
    if err != nil {
        t.Error(err)
    }
    write(conn, &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;)
    if !verify(conn) {
        t.Error(&amp;quot;Bad write!&amp;quot;)
    }
    if r := read(conn, &amp;quot;foo&amp;quot;); r != &amp;quot;bar&amp;quot; {
        t.Errorf(&amp;quot;Bad read! Got %v&amp;quot;, r)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start up an instance, open up a TCP connection, write and read from the connection, and print any errors that come up. It&amp;rsquo;s not just the main program that has tests &amp;ndash; its dependencies are also well-tested.&lt;/p&gt;

&lt;p&gt;Not only that, all of these tests are run automatically at &lt;a href=&#34;https://drone.io/&#34;&gt;Drone&lt;/a&gt; after every push to GitHub:
&lt;img src=&#34;https://31.media.tumblr.com/0ae411257310108a4ba2272e2407676a/tumblr_inline_mxypyb0fxy1rs73cz.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Did I mention Drone is free for open-source projects?&lt;/p&gt;

&lt;h2 id=&#34;keeping-things-safe:f2cd37c860827c4af25243a3d0171392&#34;&gt;Keeping things safe&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t want to lose my data, but as I mentioned, Fickle only stores data in memory. Everything is lost when the instance stops. Ouch!&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s two ways I can keep data: save it on the disk or have a replica. These aren&amp;rsquo;t mutually exclusive. I actually had replication working earlier, but it was removed due to design changes.&lt;/p&gt;

&lt;p&gt;The way I implemented replication was by broadcasting commands to replicas. Of course, this is incredibly trivial and doesn&amp;rsquo;t guarantee consistency and many things can go wrong.&lt;/p&gt;

&lt;p&gt;Saving to disk can also be trivial. I could just store a snapshot of the state and reload it, and I could also append a log of the operations sent to the database. The log would be &amp;ldquo;replayed&amp;rdquo; to restore data.&lt;/p&gt;

&lt;h2 id=&#34;transactions:f2cd37c860827c4af25243a3d0171392&#34;&gt;Transactions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;d love to add transactions to this. It&amp;rsquo;s probably going to be incredibly difficult, but I shall try!&lt;/p&gt;

&lt;h2 id=&#34;looking-ahead:f2cd37c860827c4af25243a3d0171392&#34;&gt;Looking ahead&lt;/h2&gt;

&lt;p&gt;Have you seen this?
&lt;img src=&#34;https://pbs.twimg.com/media/BbksqhsCIAASoUl.png:large&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a &lt;a href=&#34;http://cubox-i.com/&#34;&gt;CuBox-i&lt;/a&gt;. It&amp;rsquo;s a tiny ARM system that can have up to 4 cores and 2 GB of RAM. And it&amp;rsquo;s not that expensive.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an aside: I have a bunch of cPanel customers at &lt;a href=&#34;https://bitcable.com/&#34;&gt;Bitcable&lt;/a&gt;, and I wanted to look at the distribution of MySQL database sizes. Here&amp;rsquo;s what it looks like:
&lt;img src=&#34;https://31.media.tumblr.com/63b2996bb8861072c304d4fcac2a10ef/tumblr_inline_mxyqoxzVFd1rs73cz.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Most are less than 99 MB! You could easily fit those into RAM, after accounting for overhead. It would be very realistic for me to, for example, put Misframe on a CuBox. I actually want to do that.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s basically my goal for 2014: to get this key-value store to a point where I can depend on it to host my blog. It would also be cool to have a framework to test out interesting distributed computing things, like coordination protocols (eg. Paxos or Raft).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Types...</title>
      <link>http://misfra.me/types</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/types</guid>
      <description>&lt;p&gt;What does this print?&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type Foo interface {
    foo()
}

type A int
type B A

func (a A) foo() {}
func (b B) foo() {}

func main() {
    hashmap := make(map[Foo]string)
    a := A(1)
    b := B(1)
    hashmap[a] = &amp;quot;foo&amp;quot;
    hashmap[b] = &amp;quot;bar&amp;quot;
    fmt.Println(hashmap)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Let&amp;rsquo;s see&amp;hellip; there&amp;rsquo;s a map that takes keys of type &lt;code&gt;Foo&lt;/code&gt;, which is an interface. &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; both implement &lt;code&gt;foo()&lt;/code&gt;, so they&amp;rsquo;re of the &lt;code&gt;Foo&lt;/code&gt; interface. So the output should be &lt;code&gt;map[1:bar]&lt;/code&gt;, right?&lt;/p&gt;

&lt;p&gt;Nope. It&amp;rsquo;s actually &lt;code&gt;map[1:foo 1:bar]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think this is weird. :-/&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://play.golang.org/p/AlmujxUWRa&#34;&gt;http://play.golang.org/p/AlmujxUWRa&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magic.</title>
      <link>http://misfra.me/magic</link>
      <pubDate>Sat, 07 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/magic</guid>
      <description>&lt;p&gt;A friend was talking over dinner about when he was asked, during an interview, what happens when you type in a URL into an address bar in a browser. Lots of stuff happens!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m just going to start listing stuff. It&amp;rsquo;s practically impossible for me to get everything, so I&amp;rsquo;ll just do a brain dump:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A DNS request over UDP to get an IP address&lt;/li&gt;
&lt;li&gt;A TCP connection gets established (SYNs and ACKs!)&lt;/li&gt;
&lt;li&gt;A GET request is created by the browser and sent over that connection&lt;/li&gt;
&lt;li&gt;Tons of different things can happen after that, including proxying, database operations, cache reads, whatever.&lt;/li&gt;
&lt;li&gt;The browser might get a response back&lt;/li&gt;
&lt;li&gt;HTML gets parsed and a DOM tree gets generated&lt;/li&gt;
&lt;li&gt;External resources get fetched, scripts run&lt;/li&gt;
&lt;li&gt;Google analytics stuff gets injected so The Man can track you&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s pretty complicated stuff so far, but I haven&amp;rsquo;t even mentioned stuff like&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TCP retries&lt;/li&gt;
&lt;li&gt;Anycast DNS (which is really cool!)&lt;/li&gt;
&lt;li&gt;IP transit routing&lt;/li&gt;
&lt;li&gt;kernel queues and buffers&lt;/li&gt;
&lt;li&gt;load balancing&lt;/li&gt;
&lt;li&gt;SO MUCH MORE.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I was younger, the Internet was magical. When I installed my first web server in 4th grade or so, it got less magical. You know what the weird thing is? Now that I know more about what happens, it seems so magical again!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rejecting customers</title>
      <link>http://misfra.me/rejecting-customers</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/rejecting-customers</guid>
      <description>&lt;p&gt;When I first started &lt;a href=&#34;https://bitcable.com/&#34;&gt;Bitcable&lt;/a&gt;, I used to get really excited whenever I had a new order. It sounds great, right? A new customer, more revenue, getting bigger! Yay! And it was great. I thought it was perfect&amp;hellip; until there were trouble clients.&lt;/p&gt;

&lt;p&gt;My &amp;ldquo;trouble client&amp;rdquo; classification is pretty diverse, in fact. I&amp;rsquo;ve had people open up support tickets constantly. Some have no idea how to manage servers and ask for help on trivial tasks. Sometimes, people break things and want me to fix them. There was once one guy who ordered a VM, paid his invoice, and then, less than 20 minutes later, opened a high priority support ticket asking why it wasn&amp;rsquo;t activated yet. In case you don&amp;rsquo;t know, &amp;ldquo;high priority&amp;rdquo; is for situations like &amp;ldquo;all of my services are down!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I canceled that last customer&amp;rsquo;s order and refunded his invoice. There have been times in the past when I&amp;rsquo;ve let people like that in and it&amp;rsquo;s never good. Some people have this ridiculously high feeling of entitlement &amp;ndash; all for like $4 a month&amp;hellip; seriously? It&amp;rsquo;s annoying. I try to be patient, but when I think someone&amp;rsquo;s getting out of control, I&amp;rsquo;m going to give them a refund and tell them to leave. Protip: the customer is not always right!&lt;/p&gt;

&lt;p&gt;Two years ago, I used to do a lot of hand-holding. The control panel software I use didn&amp;rsquo;t have OS templates back then, so I offered to install an OS on a clients&amp;rsquo; VM if they wanted. I got pretty good at that ;). It was fun, too. Some people had odd requests, like a BSD distro. The first time I used FreeBSD / OpenBSD was when I set those up for customers :).&lt;/p&gt;

&lt;p&gt;That was in the beginning. I quickly learned that installing 8 VMs a day was not a good use of my time. I stopped the hand-holding.&lt;/p&gt;

&lt;p&gt;These days, I make it &lt;em&gt;very&lt;/em&gt; clear to people who send me sales emails: they&amp;rsquo;re responsible for their server. I make sure everything works, but everything else is on them. You might ask: won&amp;rsquo;t you lose a bunch of customers that way? Sure. I guarantee it. I thought about this too, but honestly I save myself from many annoyances and headaches. I&amp;rsquo;m stopping potential issues.&lt;/p&gt;

&lt;p&gt;I used to have a lot of support tickets to answer. It&amp;rsquo;s actually surprising how many I get these days&amp;hellip; maybe once a week! And they&amp;rsquo;re all minor issues or questions! Major lesson learned from running a service-based business:  being proactive is crucial! Oh, and be fair. I think many service providers aren&amp;rsquo;t fair, and customers get upset. I try to not upset customers when I tell them to leave. I guess it works considering I haven&amp;rsquo;t seen a single bad review after 3 years! #DoingItRight&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Router-on-a-stick</title>
      <link>http://misfra.me/router-on-a-stick</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/router-on-a-stick</guid>
      <description>&lt;p&gt;(This is an old post from July 2012.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/6ab3187ba70814940579f613dd54e156/tumblr_inline_mwy0cl4GTl1rs73cz.jpg&#34; alt=&#34;&#34; /&gt;
Attribution: &lt;a href=&#39;http://www.flickr.com/photos/pdstahl/3903808739/&#39;&gt;Patrick Stahl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is just a quick configuration example to setup a “router-on-a-stick.” I’m using Vyatta for the router and a Brocade switch. I’ve changed the real addresses.&lt;/p&gt;

&lt;h2&gt;Brocade switch configuration&lt;/h2&gt;

&lt;p&gt;Ethernet 16 is the &lt;em&gt;trunk&lt;/em&gt; port, in the Cisco lingo. It’s hooked up to the Vyatta router. It has to be tagged because we need to tag each frame with a VLAN ID so the switch knows where to send it. Ethernet 43 is an untagged (aka &lt;em&gt;access&lt;/em&gt;) port which is connected to a server.&lt;/p&gt;

&lt;pre&gt;vlan 20 by port
 tagged ethe 16                                                   
 untagged ethe 43 
&lt;/pre&gt;

&lt;h2&gt;Vyatta configuration&lt;/h2&gt;

&lt;p&gt;eth1 is connected to my provider. eth0 is going back to the switch. vif 20 refers to VLAN 20, which we already defined on the switch.&lt;/p&gt;

&lt;pre&gt;interfaces {
    ethernet eth0 {
        hw-id 90:e2:ba:1b:5a:54
        vif 20 {
            address 10.1.5.129/29
            address 2001:db8:5341:31::/64
        }
    }
    ethernet eth1 {
        address 10.1.5.42/29
        address 2001:db8:5341:8::2/126
        hw-id 00:1a:4d:53:f5:d4
    }
    loopback lo {
    }
}
protocols {
    static {
        route 0.0.0.0/0 {
            next-hop 10.1.5.41 {
            }
        }
        route6 ::/0 {
            next-hop 2001:db8:5341:8::1 {
            }
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;Not really a useful blog post, but I just wanted to post &lt;em&gt;something&lt;/em&gt;. Vyatta is great so far!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on garbage collection</title>
      <link>http://misfra.me/thoughts-on-garbage-collection</link>
      <pubDate>Sat, 23 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/thoughts-on-garbage-collection</guid>
      <description>

&lt;p&gt;A few days ago, I was in the shower thinking about garbage collectors. I think some of my best ideas come from the shower, and I think it&amp;rsquo;s because I don&amp;rsquo;t have anything to distract me.&lt;/p&gt;

&lt;p&gt;I was thinking about easy it was to use the &lt;a href=&#34;http://www.hpl.hp.com/personal/Hans_Boehm/gc/&#34;&gt;Hans Boehm garbage collector&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Empirically, this collector works with most unmodified C programs, simply by replacing malloc with GC_malloc calls, replacing realloc with GC_realloc calls, and removing free calls.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What a great abstraction! I was thinking about how it knew a block of memory should be freed. I thought, well&amp;hellip; an easy way would be to just scan through the entire address space of a program and count up references. Of course, this isn&amp;rsquo;t efficient &lt;em&gt;at all,&lt;/em&gt; but it&amp;rsquo;s a good start.&lt;/p&gt;

&lt;p&gt;Cool. I had an idea. How would I actually implement it? The first step was to figure out how to scan through a program&amp;rsquo;s address space. I won&amp;rsquo;t go into detail, but let&amp;rsquo;s just say I spent a good 3 or 4 hours following links and reading up on stack allocations and registers. Not fun.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t remember the details since most of this stuff happened really late at night, but I do remember having a really hard time trying to figure out how to search through address spaces. I tried a bunch of silly things, and got far too many memory access violations. Lots and lots of trial and failure.&lt;/p&gt;

&lt;p&gt;At some point, I stumbled onto &lt;code&gt;/proc/self/maps&lt;/code&gt;. I probably yelled out, &amp;ldquo;ARE YOU SERIOUS?&amp;rdquo; or something because I was really excited. The kernel tells us what memory mappings a program has access to! It&amp;rsquo;s really silly, now that I think about it. I spent far too much time trying to figure this out. I just didn&amp;rsquo;t know what I didn&amp;rsquo;t know, so I didn&amp;rsquo;t know what to search for on Google!&lt;/p&gt;

&lt;p&gt;Hans Boehm garbage collector looks through &lt;code&gt;/proc/self/maps&lt;/code&gt; too. I didn&amp;rsquo;t look at its source code first to give myself a researching challenge ;).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what I have so far: &lt;a href=&#34;https://gist.github.com/PreetamJinka/7611115&#34;&gt;GitHub Gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Call &lt;code&gt;malloc&lt;/code&gt; and remember the address. We need to pass that address to &lt;code&gt;free&lt;/code&gt; later on.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Read through &lt;code&gt;/proc/self/maps&lt;/code&gt; and get all the memory ranges&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Look for possible pointers in that range, ignoring the pointer we use to keep track of the &lt;code&gt;malloc&lt;/code&gt;&amp;rsquo;d memory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If there aren&amp;rsquo;t any references, free that block.*&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;*Here&amp;rsquo;s the issue: there&amp;rsquo;s always one reference on the stack. I&amp;rsquo;m not sure where that is. If I knew what it was, I&amp;rsquo;d ignore it :). Since I don&amp;rsquo;t know where it is, I free a block if it has 1 reference. If you know how to fix it, let me know!&lt;/p&gt;

&lt;h2 id=&#34;other-thoughts:1a66131202f42ef1b31b111e63e575d4&#34;&gt;Other thoughts&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll never know whether some address in memory is a pointer or a value. The best thing to do is assume it&amp;rsquo;s a pointer. This means it&amp;rsquo;s conservative.&lt;/p&gt;

&lt;p&gt;I have a VERY large amount of respect for the people who write garbage collectors. These things are complicated. They&amp;rsquo;re hard to test. It&amp;rsquo;s non-deterministic. They&amp;rsquo;re confusing. Heck, even I got confused at times when I was writing stuff like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if( (intptr_t)(*(void**)i) == (intptr_t)(address) &amp;amp;&amp;amp;
            (intptr_t)(i) != (uintptr_t)(ignore)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m casting a &lt;code&gt;void*&lt;/code&gt; to a &lt;code&gt;void**&lt;/code&gt; and then dereferencing it? Huh?! The more I think about it, the less it makes sense. It made sense to me late at night.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Non-blocking I/O thoughts</title>
      <link>http://misfra.me/non-blocking-i-o-thoughts</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/non-blocking-i-o-thoughts</guid>
      <description>

&lt;p&gt;I started using Node.js a long time ago. It was the first time I saw async execution outside of the browser. It was cool &amp;ndash; still is.&lt;/p&gt;

&lt;p&gt;I worked with Node internals for a significant part of a summer. It doesn&amp;rsquo;t take long before you realize that the event loop is one of the most important components of Node. Node uses libuv for its evented I/O, and I sort of got into it, but not really. Conceptually, it sort of made sense.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been working a lot using Go and C lately, and also thinking about async stuff. Something you can do in Node is pass a callback to an async file reading function and have that operation not block. Cool. You can also read from a socket asynchronously. Great! How would I do that in C?&lt;/p&gt;

&lt;p&gt;I started reading. Hey, you can do non-blocking socket reads using plain ol&amp;rsquo; vanilla system calls. The kernel is nice enough to provide that for us. I can do async stuff with sockets, but what about files? I started reading some more.&lt;/p&gt;

&lt;p&gt;No dice.&lt;/p&gt;

&lt;p&gt;Huh&amp;hellip; but how is Node doing it? It&amp;rsquo;s non-blocking and single-threaded, right? It can&amp;rsquo;t be using blocking syscalls!&lt;/p&gt;

&lt;p&gt;Wrong!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s kind of embarrassing that I didn&amp;rsquo;t realize this until now. Node is &lt;em&gt;not single-threaded.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The libuv filesystem operations are different from socket operations. Socket operations use the non-blocking operations provided by the operating system. &lt;strong&gt;Filesystem operations use blocking functions internally, but invoke these functions in a thread pool&lt;/strong&gt; and notify watchers registered with the event loop when application interaction is required.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;a href=&#34;http://nikhilm.github.io/uvbook/filesystem.html&#34;&gt;http://nikhilm.github.io/uvbook/filesystem.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Doh! The Node event loop is single-threaded, but if you do async file reads, for example, another thread &lt;em&gt;will be used&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;By now, I&amp;rsquo;m thinking async file I/O is annoying in C, unless you use a library to manage a thread pool for you.&lt;/p&gt;

&lt;h2 id=&#34;libdispatch:eba58e94703725102428b160b750a9dc&#34;&gt;libdispatch&lt;/h2&gt;

&lt;p&gt;At vBSDCon, I heard about &lt;a href=&#34;http://en.wikipedia.org/wiki/Grand_Central_Dispatch&#34;&gt;libdispatch&lt;/a&gt;. It&amp;rsquo;s really interesting! I wouldn&amp;rsquo;t call it an async I/O library (because it&amp;rsquo;s not) &amp;ndash; it&amp;rsquo;s just a different way of thinking about things.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dispatch Queues are objects that maintain a queue of tasks, either anonymous code blocks or functions, and execute these tasks in their turn. The library automatically creates several queues with different priority levels that execute several tasks concurrently, selecting the optimal number of tasks to run based on the operating environment. A client to the library may also create any number of serial queues, which execute tasks in the order they are submitted, one at a time.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Digging deeper</title>
      <link>http://misfra.me/digging-deeper</link>
      <pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/digging-deeper</guid>
      <description>&lt;p&gt;I&amp;rsquo;m starting to find kernel internals, debugging, tracing, and compilers really interesting.&lt;/p&gt;

&lt;p&gt;Wait no, I&amp;rsquo;m finding interesting things about them.&lt;/p&gt;

&lt;p&gt;Regardless, I&amp;rsquo;m digging deeper into stuff. It&amp;rsquo;s messy and ugly, but that&amp;rsquo;s what you get when you look under abstractions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What not to do...</title>
      <link>http://misfra.me/what-not-to-do</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/what-not-to-do</guid>
      <description>&lt;p&gt;A web hosting provider called &amp;ldquo;Easy Hosting&amp;rdquo; shut down recently. Here&amp;rsquo;s what their website says right now:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;re Sorry. After 5 years of service(rlshosting.com,easyhosting.pw), we are unable to provide service period and the backups were on the same datacenter too. We ran out of money and we cannot pay our server bills. Our Servers are suspended. You can believe what you want but we didn&amp;rsquo;t spend your money for fun. It wasn&amp;rsquo;t fun at all. Thank you for your business and we are very sorry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here&amp;rsquo;s what the owner, &amp;ldquo;M Bacon&amp;rdquo;, &lt;a href=&#34;http://www.webhostingtalk.com/showthread.php?t=1309262#post8861654&#34;&gt;said on Web Hosting Talk&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As for being shut down, I don&amp;rsquo;t think anyone will take it lightly. That&amp;rsquo;s why I prefer to not to say anything. This is my last message. Good luck in your future hosting world. I am done for real. I need to find a better job than this crud. Everything goes wrong no matter how hard I try.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That annoys me.&lt;/p&gt;

&lt;p&gt;In fact, stuff like this (companies going dark) annoyed me a long time ago. I first joined Web Hosting Talk 6 years ago. I couldn&amp;rsquo;t make an account before then because I wasn&amp;rsquo;t old enough to tick the &amp;ldquo;I am 13 years or older&amp;rdquo; box during signup :). I was a long-time &amp;ldquo;lurker.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I used to go on WHT every day. I guess it was my equivalent of Reddit. There were no shortage of posts like this:
&lt;img src=&#34;http://media.tumblr.com/fad33cb1641eb60869714533b25d98bf/tumblr_inline_mu69r05L6P1rs73cz.png&#34; alt=&#34;&#34; /&gt;

Stuff like that showed up ALL THE TIME. I got annoyed. I got the impression that for some reason, web hosting &amp;ldquo;companies&amp;rdquo; always seemed to do things wrong. Why is that?&lt;/p&gt;

&lt;p&gt;I thought, &amp;ldquo;Hmm&amp;hellip; I bet I can do what they&amp;rsquo;re doing, except much better.&amp;rdquo; Here I am three years later, seeing things like this:
&lt;a href=&#34;http://lowendtalk.com/discussion/comment/310351/#Comment_310351&#34;&gt;&lt;img src=&#34;http://media.tumblr.com/87942df5d9eda5397c73b7845e9b7075/tumblr_inline_mu69xasxAe1rs73cz.png&#34; alt=&#34;&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve seen what &lt;em&gt;not&lt;/em&gt; to do enough times, you get a pretty good feeling about what works.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hinting</title>
      <link>http://misfra.me/hinting</link>
      <pubDate>Tue, 06 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://misfra.me/hinting</guid>
      <description>&lt;p&gt;Can you tell the difference between these two images? Click on them to see a full-size version.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://static.misfra.me/images/hinted.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://media.tumblr.com/58bee817767f5dd8bc91ac8cc1b16495/tumblr_inline_mr52atpwFa1qz4rgp.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://static.misfra.me/images/unhinted.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://media.tumblr.com/328c56f4f684c3febbb8653df3da8c18/tumblr_inline_mr52b22bad1qz4rgp.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Hint: there is a difference, and it&#39;s font hinting!&lt;/p&gt;
&lt;p&gt;The first image has hinted text, and it&#39;s&amp;nbsp;&lt;em&gt;terrible!&lt;/em&gt;&amp;nbsp;It&#39;s morphed. The dimensions are funky. Why destroy a perfectly fine typeface (created by&amp;nbsp;&lt;em&gt;artists&lt;/em&gt;) by hinting (using algorithms and fancy math)?&lt;/p&gt;
&lt;p&gt;I turn hinting off everywhere. I suggest you do it too. If you use Ubuntu, you can install Unity Tweak Tool:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/8ed9cda1202fb1d43c60f62585ce351d/tumblr_inline_mr52o4CCeB1qz4rgp.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Sublime Text will still hint. You&#39;ll have to use a &lt;code&gt;~/.fonts.config&lt;/code&gt; file to take care of that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE fontconfig SYSTEM &amp;quot;fonts.dtd&amp;quot;&amp;gt;
&amp;lt;fontconfig&amp;gt;
&amp;lt;match target=&amp;quot;font&amp;quot;&amp;gt;
   &amp;lt;edit name=&amp;quot;hinting&amp;quot; mode=&amp;quot;assign&amp;quot;&amp;gt;
      &amp;lt;bool&amp;gt;true&amp;lt;/bool&amp;gt;
   &amp;lt;/edit&amp;gt;
&amp;lt;/match&amp;gt;

&amp;lt;match target=&amp;quot;font&amp;quot;&amp;gt;
   &amp;lt;edit name=&amp;quot;hintstyle&amp;quot; mode=&amp;quot;assign&amp;quot;&amp;gt;
         &amp;lt;const&amp;gt;hintnone&amp;lt;/const&amp;gt;
    &amp;lt;/edit&amp;gt;
&amp;lt;/match&amp;gt;

&amp;lt;/fontconfig&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make text look good!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>